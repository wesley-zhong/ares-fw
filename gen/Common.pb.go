// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.12.3
// source: Common.proto

package gen

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MsgId int32

const (
	MsgId_BEGIN                         MsgId = 0
	MsgId_HEARTBEAT_REQ                 MsgId = 2    //heartbeat
	MsgId_ENTER_ROOM_REQ                MsgId = 5000 //user enter room request
	MsgId_ENTER_ROOM_RES                MsgId = 5001 // user enter room response
	MsgId_ENTER_ROOM_MSG                MsgId = 5002 //  msg to others user enter room broadcast
	MsgId_GAME_READY_REQ                MsgId = 5100 // user ready request
	MsgId_GAME_READY_RES                MsgId = 5101 // user ready response
	MsgId_GAME_READY_MSG                MsgId = 5102 // user ready  msg broadcast
	MsgId_USER_STATUS_CHANE_MSG         MsgId = 5111
	MsgId_GMAE_START_MSG                MsgId = 5203
	MsgId_LEAVE_ROOM_REQ                MsgId = 5300 //  user leave room request
	MsgId_LEAVE_ROOM_RES                MsgId = 5301 // user leave room response
	MsgId_LEAVE_ROOM_MSG                MsgId = 5302
	MsgId_USER_OPT_MSG                  MsgId = 5402 //   user option msg broadcast
	MsgId_BATTLE_RESULT_INFI_REQ        MsgId = 5403
	MsgId_BATTLE_STATUS_DATA_REQ        MsgId = 5405
	MsgId_BATTLE_SOME_ONE_NOT_REAY      MsgId = 5406
	MsgId_BATTLE_ROOM_MASTER_CHANGE_MSG MsgId = 5409
	MsgId_INSTANTIATE_MSG               MsgId = 5410 // instantiate GameObject
	MsgId_USER_MOVE_POS                 MsgId = 6000
	MsgId_USER_CHANGE_ROTATOR           MsgId = 6001
	MsgId_USER_ANIMATION                MsgId = 60002
	MsgId_GAME_FINISH                   MsgId = 5500
)

// Enum value maps for MsgId.
var (
	MsgId_name = map[int32]string{
		0:     "BEGIN",
		2:     "HEARTBEAT_REQ",
		5000:  "ENTER_ROOM_REQ",
		5001:  "ENTER_ROOM_RES",
		5002:  "ENTER_ROOM_MSG",
		5100:  "GAME_READY_REQ",
		5101:  "GAME_READY_RES",
		5102:  "GAME_READY_MSG",
		5111:  "USER_STATUS_CHANE_MSG",
		5203:  "GMAE_START_MSG",
		5300:  "LEAVE_ROOM_REQ",
		5301:  "LEAVE_ROOM_RES",
		5302:  "LEAVE_ROOM_MSG",
		5402:  "USER_OPT_MSG",
		5403:  "BATTLE_RESULT_INFI_REQ",
		5405:  "BATTLE_STATUS_DATA_REQ",
		5406:  "BATTLE_SOME_ONE_NOT_REAY",
		5409:  "BATTLE_ROOM_MASTER_CHANGE_MSG",
		5410:  "INSTANTIATE_MSG",
		6000:  "USER_MOVE_POS",
		6001:  "USER_CHANGE_ROTATOR",
		60002: "USER_ANIMATION",
		5500:  "GAME_FINISH",
	}
	MsgId_value = map[string]int32{
		"BEGIN":                         0,
		"HEARTBEAT_REQ":                 2,
		"ENTER_ROOM_REQ":                5000,
		"ENTER_ROOM_RES":                5001,
		"ENTER_ROOM_MSG":                5002,
		"GAME_READY_REQ":                5100,
		"GAME_READY_RES":                5101,
		"GAME_READY_MSG":                5102,
		"USER_STATUS_CHANE_MSG":         5111,
		"GMAE_START_MSG":                5203,
		"LEAVE_ROOM_REQ":                5300,
		"LEAVE_ROOM_RES":                5301,
		"LEAVE_ROOM_MSG":                5302,
		"USER_OPT_MSG":                  5402,
		"BATTLE_RESULT_INFI_REQ":        5403,
		"BATTLE_STATUS_DATA_REQ":        5405,
		"BATTLE_SOME_ONE_NOT_REAY":      5406,
		"BATTLE_ROOM_MASTER_CHANGE_MSG": 5409,
		"INSTANTIATE_MSG":               5410,
		"USER_MOVE_POS":                 6000,
		"USER_CHANGE_ROTATOR":           6001,
		"USER_ANIMATION":                60002,
		"GAME_FINISH":                   5500,
	}
)

func (x MsgId) Enum() *MsgId {
	p := new(MsgId)
	*p = x
	return p
}

func (x MsgId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MsgId) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_proto_enumTypes[0].Descriptor()
}

func (MsgId) Type() protoreflect.EnumType {
	return &file_Common_proto_enumTypes[0]
}

func (x MsgId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MsgId.Descriptor instead.
func (MsgId) EnumDescriptor() ([]byte, []int) {
	return file_Common_proto_rawDescGZIP(), []int{0}
}

type EventId int32

const (
	EventId_EVENT_BEGIN                          EventId = 0
	EventId_Activate                             EventId = 10000
	EventId_ActivateAbility                      EventId = 10001
	EventId_ActivateBonusObjective               EventId = 10002
	EventId_ActivateEscape                       EventId = 10003
	EventId_ActivateWall                         EventId = 10004
	EventId_AddCollectibleObject                 EventId = 10005
	EventId_AddEffectOverTimeRPC                 EventId = 10006
	EventId_ApplyAreaEffect                      EventId = 10007
	EventId_BeginEndGame                         EventId = 10008
	EventId_BeginStateApproachFoodState          EventId = 10009
	EventId_CancelEmoteAnim                      EventId = 10010
	EventId_ChangeFlareState                     EventId = 10011
	EventId_ChangeMaterialRPC                    EventId = 10012
	EventId_ChangeNumberRPC                      EventId = 10013
	EventId_ClearEffectRPC                       EventId = 10014
	EventId_ClickRpc                             EventId = 10015
	EventId_ColorAssignedRPC                     EventId = 10016
	EventId_ConfirmHit                           EventId = 10017
	EventId_Consume                              EventId = 10018
	EventId_ConsumeItem                          EventId = 10019
	EventId_DebugSpawnObjectRPC                  EventId = 10020
	EventId_DelayedSetupForRevive                EventId = 10021
	EventId_DestroyRpc                           EventId = 10022
	EventId_Died                                 EventId = 10023
	EventId_DisableAnimRPC                       EventId = 10024
	EventId_DisableMeshes                        EventId = 10025
	EventId_DisableObjectiveLocator              EventId = 10026
	EventId_DisableRadioOption                   EventId = 10027
	EventId_DoConsumeEquippedItem                EventId = 10028
	EventId_DoExplosion                          EventId = 10029
	EventId_DoLook                               EventId = 10030
	EventId_DoPuke                               EventId = 10031
	EventId_DoRoar                               EventId = 10032
	EventId_DoSetToIdle                          EventId = 10033
	EventId_DoShowEmote                          EventId = 10034
	EventId_DoShowTruthSerumBanner               EventId = 10035
	EventId_DoSyncCurrentPressTime               EventId = 10036
	EventId_EnableCollectibleObjectsRPC          EventId = 10037
	EventId_EndPuke                              EventId = 10038
	EventId_EndStateApproachFoodState            EventId = 10039
	EventId_EquipGameObjectInCurrentSlot         EventId = 10040 //这个协议没有用到
	EventId_EscapeReady                          EventId = 10041
	EventId_ForceBunkerOpenRPC                   EventId = 10042
	EventId_ForceReady                           EventId = 10043
	EventId_FreeFromTrap                         EventId = 10044
	EventId_GameOver                             EventId = 10045
	EventId_HideGameObject                       EventId = 10046
	EventId_HostDisconnectRPC                    EventId = 10047 //这个协议没有用到
	EventId_InitDeadAnimal                       EventId = 10048
	EventId_InitForAttackWave                    EventId = 10049
	EventId_InitHerd                             EventId = 10050
	EventId_InitializeInventory                  EventId = 10051
	EventId_InitiateRematchRPC                   EventId = 10052
	EventId_InitiateTask                         EventId = 10053
	EventId_InitiateTeleport                     EventId = 10054
	EventId_InitInventory                        EventId = 10055
	EventId_KillFromConversion                   EventId = 10056
	EventId_LockConsoleRPC                       EventId = 10057
	EventId_LogDamageEvent                       EventId = 10058
	EventId_LogFallDamage                        EventId = 10059
	EventId_MarkInUseBy                          EventId = 10060
	EventId_MarkSabotaged                        EventId = 10061
	EventId_MarkWaveComplete                     EventId = 10062
	EventId_MigrateAiUnits                       EventId = 10063
	EventId_NotifyEscapeLeft                     EventId = 10064
	EventId_NotifyLockChange                     EventId = 10065
	EventId_NotifyPlayerAffectedRPC              EventId = 10066
	EventId_NotifyPlayerBoarded                  EventId = 10067
	EventId_NotifyPlayerDied                     EventId = 10068
	EventId_NotifyPlayerDisembarked              EventId = 10069
	EventId_NotifyPlayerIncapacitated            EventId = 10070
	EventId_NotifyPlayerLeft                     EventId = 10071
	EventId_NotifySurvivorConverted              EventId = 10072
	EventId_NotifyYetiObjComplete                EventId = 10073
	EventId_ObjectRepaired                       EventId = 10074
	EventId_ObjectRepairedRPC                    EventId = 10075
	EventId_ObjectSabotaged                      EventId = 10076
	EventId_OnAlienArtifactNegative              EventId = 10077
	EventId_OnAlienArtifactPositive              EventId = 10078
	EventId_OnAllTerminalsEnabled                EventId = 10079
	EventId_OnAmmoChanged                        EventId = 10080
	EventId_OnApplyTrap                          EventId = 10081
	EventId_OnBeginAttackState                   EventId = 10082
	EventId_OnBeginCautionState                  EventId = 10083
	EventId_OnBeginDamagedState                  EventId = 10084
	EventId_OnBeginDeathState                    EventId = 10085
	EventId_OnBeginEatingState                   EventId = 10086
	EventId_OnBeginImmediatelyReturnToStartState EventId = 10087
	EventId_OnBeginPatrolState                   EventId = 10088
	EventId_OnBeginPursueTargetState             EventId = 10089
	EventId_OnBeginTrappedState                  EventId = 10090
	EventId_OnCloneCreature                      EventId = 10091
	EventId_OnCloneFailure                       EventId = 10092
	EventId_OnCloneFinished                      EventId = 10093
	EventId_OnCloneSuccess                       EventId = 10094
	EventId_OnCollide                            EventId = 10095
	EventId_OnConsumeRPC                         EventId = 10096
	EventId_OnConversionProgressDecayed          EventId = 10097
	EventId_OnConversionPulseHit                 EventId = 10098
	EventId_OnConvertPlayer                      EventId = 10099
	EventId_OnDeploy                             EventId = 10100
	EventId_OnDisarm                             EventId = 10101
	EventId_OnDoFuel                             EventId = 10102
	EventId_OnDoRoarAoE                          EventId = 10103
	EventId_OnDrop                               EventId = 10104
	EventId_OnEndCautionState                    EventId = 10105
	EventId_OnEndDamagedState                    EventId = 10106
	EventId_OnEndDraggingPlayer                  EventId = 10107
	EventId_OnEndEatingState                     EventId = 10108
	EventId_OnEndInvestigateThreatState          EventId = 10109
	EventId_OnEndTrappedState                    EventId = 10110
	EventId_OnFearApplied                        EventId = 10111
	EventId_OnFearReverted                       EventId = 10112
	EventId_OnFinishedDying                      EventId = 10113
	EventId_OnGotoRagdoll                        EventId = 10114
	//OnImpactRPC = 10115;
	EventId_OnItemsCrateFound                EventId = 10116
	EventId_OnLabOpened                      EventId = 10117
	EventId_OnLogBonusObjectiveCompleteEvent EventId = 10118
	EventId_OnLogBunkerOpenedEvent           EventId = 10119
	EventId_OnLogHunterRevealedEvent         EventId = 10120
	EventId_OnLogIdentityStealEvent          EventId = 10121
	EventId_OnLogPlayerClonedEvent           EventId = 10122
	EventId_OnLogPlayerDeathEvent            EventId = 10123
	EventId_OnLogSerumLabOpenedEvent         EventId = 10124
	EventId_OnLogUsedTruthSerumEvent         EventId = 10125
	EventId_OnMedicAbilityHit                EventId = 10126
	EventId_OnPadreBoost                     EventId = 10127
	EventId_OnPickup                         EventId = 10128
	EventId_OnRagdollApplied                 EventId = 10129
	EventId_OnRagdollReverted                EventId = 10130
	EventId_OnSetInYellowFlagPoint           EventId = 10131
	EventId_OnSetUsingMainCamera             EventId = 10132
	EventId_OnSleeperAbilityHit              EventId = 10133
	EventId_OnStartDraggingPlayer            EventId = 10134
	EventId_OnStateChange                    EventId = 10135
	EventId_OnStealRole                      EventId = 10136
	EventId_OnSurvivorAirdropAccessed        EventId = 10137
	EventId_OnSwapBodyDebug                  EventId = 10138
	EventId_OnSwapClothes                    EventId = 10139
	EventId_OnSwapPlayerClass                EventId = 10140
	EventId_OnSwapPlayerRole                 EventId = 10141
	EventId_OnThrow                          EventId = 10142
	EventId_OnTranquilizationApplied         EventId = 10143
	EventId_OnTranquilizationReverted        EventId = 10144
	EventId_OnTriggerAltPFX                  EventId = 10145
	EventId_OpenBunkers                      EventId = 10146
	EventId_Overload                         EventId = 10147
	EventId_PlayAbsorbPfxForTraitor          EventId = 10148
	EventId_PlayEmoteAnim                    EventId = 10149
	EventId_PlayerDisconnected               EventId = 10150
	EventId_PlayFeedbackSfx                  EventId = 10151
	EventId_PlayFireSfx                      EventId = 10152
	EventId_PlayGiggleSfxRPC                 EventId = 10153
	EventId_PlayReloadSfx                    EventId = 10154
	EventId_ProcessDamageEvent               EventId = 10155
	EventId_PunDropChange                    EventId = 10156
	EventId_PunHealthChange                  EventId = 10157
	EventId_PunHungerChange                  EventId = 10158 //no  used
	EventId_RematchSelectedRPC               EventId = 10159
	EventId_RemovePfxRPC                     EventId = 10160
	EventId_RequestStateChange               EventId = 10161
	EventId_ResetDisplayTextRPC              EventId = 10162
	EventId_Revive                           EventId = 10163
	EventId_RotateSign                       EventId = 10164
	EventId_SabotageEscapeRPC                EventId = 10165
	EventId_SendSetGroundState               EventId = 10166
	EventId_SetAbility                       EventId = 10167
	EventId_SetBeaconStateRPC                EventId = 10168
	EventId_SetCurrentNode                   EventId = 10169
	EventId_SetDropPosition                  EventId = 10170
	EventId_SetEffectRPC                     EventId = 10171
	EventId_SetLeaderViewId                  EventId = 10172
	EventId_SetStartHealthForAll             EventId = 10173
	EventId_SetStateID                       EventId = 10174
	EventId_SetTerminalsCount                EventId = 10175
	EventId_SetTimerFinishedRPC              EventId = 10176
	EventId_SetUnitActivation                EventId = 10177
	EventId_SetupKnockdownState              EventId = 10178
	EventId_SetVulnerableToConversion        EventId = 10179
	EventId_SetWaveIndex                     EventId = 10180
	EventId_ShowGameObject                   EventId = 10181
	EventId_ShowSabotagedIndicator           EventId = 10182
	EventId_ShowSabotageIconRPC              EventId = 10183
	EventId_SourceItemSyncValue              EventId = 10184
	EventId_SpawnGasBubbleRPC                EventId = 10185
	EventId_SpawnParticles                   EventId = 10186
	EventId_SpreadMadnessRPC                 EventId = 10187
	EventId_StartEvent                       EventId = 10188
	EventId_StartLeaveSequence               EventId = 10189
	EventId_StopEvent                        EventId = 10190
	EventId_SyncDisableGlobalEvents          EventId = 10191
	EventId_SyncFirstObjectiveOverride       EventId = 10192
	EventId_SyncMVPStats                     EventId = 10193
	EventId_SyncOverrideGameSetting          EventId = 10194
	EventId_SyncPreSelectedBonusObjective    EventId = 10195
	EventId_SyncPreSelectedPlayerRole        EventId = 10196
	EventId_SyncPreSelectedTraitors          EventId = 10197 //工程未用到
	EventId_SyncReviveTimer                  EventId = 10198 //有RPC标注，但是没有调用
	EventId_SyncStatRPC                      EventId = 10199
	EventId_ToggleIndicator                  EventId = 10200
	EventId_TrackAnimalFedRPC                EventId = 10201
	EventId_TrapAndReleaseRPC                EventId = 10202
	EventId_TriggerAreaEffectRPC             EventId = 10203
	EventId_TriggerPfxRPC                    EventId = 10204
	EventId_UdpdateRadioSlot                 EventId = 10205
	EventId_UdpdateSlots                     EventId = 10206
	EventId_UpdateBonusObjectiveStatus       EventId = 10207
	EventId_UpdateContributorsRPC            EventId = 10208
	EventId_UpdateConversionProgress         EventId = 10209
	EventId_UpdateHealth                     EventId = 10210
	EventId_UpdateInventory                  EventId = 10211
	EventId_UpdateKeypadStateRPC             EventId = 10212
	EventId_UpdateLockStatus                 EventId = 10213
	EventId_UpdateMuscle                     EventId = 10214
	EventId_UpdateNumberOfTraitors           EventId = 10215
	EventId_UpdatePlayerState                EventId = 10216
	EventId_UpdatePoints                     EventId = 10217
	EventId_UpdateReadyCount                 EventId = 10218
	EventId_UpdateSlots                      EventId = 10219
	EventId_UpdateTaskUI                     EventId = 10220
	EventId_UpdateVoting                     EventId = 10221
	EventId_OpenCloseDoor                    EventId = 10222
	EventId_BackpackCrafted                  EventId = 10223
	EventId_OnBackpackStolen                 EventId = 10224
	EventId_SyncProximityVoiceSettingsRPC    EventId = 10225
	EventId_HideNameplateRPC                 EventId = 10226
	EventId_ShowNameplateRPC                 EventId = 10227
	EventId_KillInstantlyRPC                 EventId = 10228
	EventId_OnSabotageInAdvance              EventId = 10229
	EventId_Sabotage                         EventId = 10230
	EventId_MoveItemRPC                      EventId = 10231
	EventId_SourceItemSyncValueList          EventId = 10232
	EventId_OnImpactRPCProjectile            EventId = 10233
	EventId_OnImpactRPCThrowable             EventId = 10234
)

// Enum value maps for EventId.
var (
	EventId_name = map[int32]string{
		0:     "EVENT_BEGIN",
		10000: "Activate",
		10001: "ActivateAbility",
		10002: "ActivateBonusObjective",
		10003: "ActivateEscape",
		10004: "ActivateWall",
		10005: "AddCollectibleObject",
		10006: "AddEffectOverTimeRPC",
		10007: "ApplyAreaEffect",
		10008: "BeginEndGame",
		10009: "BeginStateApproachFoodState",
		10010: "CancelEmoteAnim",
		10011: "ChangeFlareState",
		10012: "ChangeMaterialRPC",
		10013: "ChangeNumberRPC",
		10014: "ClearEffectRPC",
		10015: "ClickRpc",
		10016: "ColorAssignedRPC",
		10017: "ConfirmHit",
		10018: "Consume",
		10019: "ConsumeItem",
		10020: "DebugSpawnObjectRPC",
		10021: "DelayedSetupForRevive",
		10022: "DestroyRpc",
		10023: "Died",
		10024: "DisableAnimRPC",
		10025: "DisableMeshes",
		10026: "DisableObjectiveLocator",
		10027: "DisableRadioOption",
		10028: "DoConsumeEquippedItem",
		10029: "DoExplosion",
		10030: "DoLook",
		10031: "DoPuke",
		10032: "DoRoar",
		10033: "DoSetToIdle",
		10034: "DoShowEmote",
		10035: "DoShowTruthSerumBanner",
		10036: "DoSyncCurrentPressTime",
		10037: "EnableCollectibleObjectsRPC",
		10038: "EndPuke",
		10039: "EndStateApproachFoodState",
		10040: "EquipGameObjectInCurrentSlot",
		10041: "EscapeReady",
		10042: "ForceBunkerOpenRPC",
		10043: "ForceReady",
		10044: "FreeFromTrap",
		10045: "GameOver",
		10046: "HideGameObject",
		10047: "HostDisconnectRPC",
		10048: "InitDeadAnimal",
		10049: "InitForAttackWave",
		10050: "InitHerd",
		10051: "InitializeInventory",
		10052: "InitiateRematchRPC",
		10053: "InitiateTask",
		10054: "InitiateTeleport",
		10055: "InitInventory",
		10056: "KillFromConversion",
		10057: "LockConsoleRPC",
		10058: "LogDamageEvent",
		10059: "LogFallDamage",
		10060: "MarkInUseBy",
		10061: "MarkSabotaged",
		10062: "MarkWaveComplete",
		10063: "MigrateAiUnits",
		10064: "NotifyEscapeLeft",
		10065: "NotifyLockChange",
		10066: "NotifyPlayerAffectedRPC",
		10067: "NotifyPlayerBoarded",
		10068: "NotifyPlayerDied",
		10069: "NotifyPlayerDisembarked",
		10070: "NotifyPlayerIncapacitated",
		10071: "NotifyPlayerLeft",
		10072: "NotifySurvivorConverted",
		10073: "NotifyYetiObjComplete",
		10074: "ObjectRepaired",
		10075: "ObjectRepairedRPC",
		10076: "ObjectSabotaged",
		10077: "OnAlienArtifactNegative",
		10078: "OnAlienArtifactPositive",
		10079: "OnAllTerminalsEnabled",
		10080: "OnAmmoChanged",
		10081: "OnApplyTrap",
		10082: "OnBeginAttackState",
		10083: "OnBeginCautionState",
		10084: "OnBeginDamagedState",
		10085: "OnBeginDeathState",
		10086: "OnBeginEatingState",
		10087: "OnBeginImmediatelyReturnToStartState",
		10088: "OnBeginPatrolState",
		10089: "OnBeginPursueTargetState",
		10090: "OnBeginTrappedState",
		10091: "OnCloneCreature",
		10092: "OnCloneFailure",
		10093: "OnCloneFinished",
		10094: "OnCloneSuccess",
		10095: "OnCollide",
		10096: "OnConsumeRPC",
		10097: "OnConversionProgressDecayed",
		10098: "OnConversionPulseHit",
		10099: "OnConvertPlayer",
		10100: "OnDeploy",
		10101: "OnDisarm",
		10102: "OnDoFuel",
		10103: "OnDoRoarAoE",
		10104: "OnDrop",
		10105: "OnEndCautionState",
		10106: "OnEndDamagedState",
		10107: "OnEndDraggingPlayer",
		10108: "OnEndEatingState",
		10109: "OnEndInvestigateThreatState",
		10110: "OnEndTrappedState",
		10111: "OnFearApplied",
		10112: "OnFearReverted",
		10113: "OnFinishedDying",
		10114: "OnGotoRagdoll",
		10116: "OnItemsCrateFound",
		10117: "OnLabOpened",
		10118: "OnLogBonusObjectiveCompleteEvent",
		10119: "OnLogBunkerOpenedEvent",
		10120: "OnLogHunterRevealedEvent",
		10121: "OnLogIdentityStealEvent",
		10122: "OnLogPlayerClonedEvent",
		10123: "OnLogPlayerDeathEvent",
		10124: "OnLogSerumLabOpenedEvent",
		10125: "OnLogUsedTruthSerumEvent",
		10126: "OnMedicAbilityHit",
		10127: "OnPadreBoost",
		10128: "OnPickup",
		10129: "OnRagdollApplied",
		10130: "OnRagdollReverted",
		10131: "OnSetInYellowFlagPoint",
		10132: "OnSetUsingMainCamera",
		10133: "OnSleeperAbilityHit",
		10134: "OnStartDraggingPlayer",
		10135: "OnStateChange",
		10136: "OnStealRole",
		10137: "OnSurvivorAirdropAccessed",
		10138: "OnSwapBodyDebug",
		10139: "OnSwapClothes",
		10140: "OnSwapPlayerClass",
		10141: "OnSwapPlayerRole",
		10142: "OnThrow",
		10143: "OnTranquilizationApplied",
		10144: "OnTranquilizationReverted",
		10145: "OnTriggerAltPFX",
		10146: "OpenBunkers",
		10147: "Overload",
		10148: "PlayAbsorbPfxForTraitor",
		10149: "PlayEmoteAnim",
		10150: "PlayerDisconnected",
		10151: "PlayFeedbackSfx",
		10152: "PlayFireSfx",
		10153: "PlayGiggleSfxRPC",
		10154: "PlayReloadSfx",
		10155: "ProcessDamageEvent",
		10156: "PunDropChange",
		10157: "PunHealthChange",
		10158: "PunHungerChange",
		10159: "RematchSelectedRPC",
		10160: "RemovePfxRPC",
		10161: "RequestStateChange",
		10162: "ResetDisplayTextRPC",
		10163: "Revive",
		10164: "RotateSign",
		10165: "SabotageEscapeRPC",
		10166: "SendSetGroundState",
		10167: "SetAbility",
		10168: "SetBeaconStateRPC",
		10169: "SetCurrentNode",
		10170: "SetDropPosition",
		10171: "SetEffectRPC",
		10172: "SetLeaderViewId",
		10173: "SetStartHealthForAll",
		10174: "SetStateID",
		10175: "SetTerminalsCount",
		10176: "SetTimerFinishedRPC",
		10177: "SetUnitActivation",
		10178: "SetupKnockdownState",
		10179: "SetVulnerableToConversion",
		10180: "SetWaveIndex",
		10181: "ShowGameObject",
		10182: "ShowSabotagedIndicator",
		10183: "ShowSabotageIconRPC",
		10184: "SourceItemSyncValue",
		10185: "SpawnGasBubbleRPC",
		10186: "SpawnParticles",
		10187: "SpreadMadnessRPC",
		10188: "StartEvent",
		10189: "StartLeaveSequence",
		10190: "StopEvent",
		10191: "SyncDisableGlobalEvents",
		10192: "SyncFirstObjectiveOverride",
		10193: "SyncMVPStats",
		10194: "SyncOverrideGameSetting",
		10195: "SyncPreSelectedBonusObjective",
		10196: "SyncPreSelectedPlayerRole",
		10197: "SyncPreSelectedTraitors",
		10198: "SyncReviveTimer",
		10199: "SyncStatRPC",
		10200: "ToggleIndicator",
		10201: "TrackAnimalFedRPC",
		10202: "TrapAndReleaseRPC",
		10203: "TriggerAreaEffectRPC",
		10204: "TriggerPfxRPC",
		10205: "UdpdateRadioSlot",
		10206: "UdpdateSlots",
		10207: "UpdateBonusObjectiveStatus",
		10208: "UpdateContributorsRPC",
		10209: "UpdateConversionProgress",
		10210: "UpdateHealth",
		10211: "UpdateInventory",
		10212: "UpdateKeypadStateRPC",
		10213: "UpdateLockStatus",
		10214: "UpdateMuscle",
		10215: "UpdateNumberOfTraitors",
		10216: "UpdatePlayerState",
		10217: "UpdatePoints",
		10218: "UpdateReadyCount",
		10219: "UpdateSlots",
		10220: "UpdateTaskUI",
		10221: "UpdateVoting",
		10222: "OpenCloseDoor",
		10223: "BackpackCrafted",
		10224: "OnBackpackStolen",
		10225: "SyncProximityVoiceSettingsRPC",
		10226: "HideNameplateRPC",
		10227: "ShowNameplateRPC",
		10228: "KillInstantlyRPC",
		10229: "OnSabotageInAdvance",
		10230: "Sabotage",
		10231: "MoveItemRPC",
		10232: "SourceItemSyncValueList",
		10233: "OnImpactRPCProjectile",
		10234: "OnImpactRPCThrowable",
	}
	EventId_value = map[string]int32{
		"EVENT_BEGIN":                          0,
		"Activate":                             10000,
		"ActivateAbility":                      10001,
		"ActivateBonusObjective":               10002,
		"ActivateEscape":                       10003,
		"ActivateWall":                         10004,
		"AddCollectibleObject":                 10005,
		"AddEffectOverTimeRPC":                 10006,
		"ApplyAreaEffect":                      10007,
		"BeginEndGame":                         10008,
		"BeginStateApproachFoodState":          10009,
		"CancelEmoteAnim":                      10010,
		"ChangeFlareState":                     10011,
		"ChangeMaterialRPC":                    10012,
		"ChangeNumberRPC":                      10013,
		"ClearEffectRPC":                       10014,
		"ClickRpc":                             10015,
		"ColorAssignedRPC":                     10016,
		"ConfirmHit":                           10017,
		"Consume":                              10018,
		"ConsumeItem":                          10019,
		"DebugSpawnObjectRPC":                  10020,
		"DelayedSetupForRevive":                10021,
		"DestroyRpc":                           10022,
		"Died":                                 10023,
		"DisableAnimRPC":                       10024,
		"DisableMeshes":                        10025,
		"DisableObjectiveLocator":              10026,
		"DisableRadioOption":                   10027,
		"DoConsumeEquippedItem":                10028,
		"DoExplosion":                          10029,
		"DoLook":                               10030,
		"DoPuke":                               10031,
		"DoRoar":                               10032,
		"DoSetToIdle":                          10033,
		"DoShowEmote":                          10034,
		"DoShowTruthSerumBanner":               10035,
		"DoSyncCurrentPressTime":               10036,
		"EnableCollectibleObjectsRPC":          10037,
		"EndPuke":                              10038,
		"EndStateApproachFoodState":            10039,
		"EquipGameObjectInCurrentSlot":         10040,
		"EscapeReady":                          10041,
		"ForceBunkerOpenRPC":                   10042,
		"ForceReady":                           10043,
		"FreeFromTrap":                         10044,
		"GameOver":                             10045,
		"HideGameObject":                       10046,
		"HostDisconnectRPC":                    10047,
		"InitDeadAnimal":                       10048,
		"InitForAttackWave":                    10049,
		"InitHerd":                             10050,
		"InitializeInventory":                  10051,
		"InitiateRematchRPC":                   10052,
		"InitiateTask":                         10053,
		"InitiateTeleport":                     10054,
		"InitInventory":                        10055,
		"KillFromConversion":                   10056,
		"LockConsoleRPC":                       10057,
		"LogDamageEvent":                       10058,
		"LogFallDamage":                        10059,
		"MarkInUseBy":                          10060,
		"MarkSabotaged":                        10061,
		"MarkWaveComplete":                     10062,
		"MigrateAiUnits":                       10063,
		"NotifyEscapeLeft":                     10064,
		"NotifyLockChange":                     10065,
		"NotifyPlayerAffectedRPC":              10066,
		"NotifyPlayerBoarded":                  10067,
		"NotifyPlayerDied":                     10068,
		"NotifyPlayerDisembarked":              10069,
		"NotifyPlayerIncapacitated":            10070,
		"NotifyPlayerLeft":                     10071,
		"NotifySurvivorConverted":              10072,
		"NotifyYetiObjComplete":                10073,
		"ObjectRepaired":                       10074,
		"ObjectRepairedRPC":                    10075,
		"ObjectSabotaged":                      10076,
		"OnAlienArtifactNegative":              10077,
		"OnAlienArtifactPositive":              10078,
		"OnAllTerminalsEnabled":                10079,
		"OnAmmoChanged":                        10080,
		"OnApplyTrap":                          10081,
		"OnBeginAttackState":                   10082,
		"OnBeginCautionState":                  10083,
		"OnBeginDamagedState":                  10084,
		"OnBeginDeathState":                    10085,
		"OnBeginEatingState":                   10086,
		"OnBeginImmediatelyReturnToStartState": 10087,
		"OnBeginPatrolState":                   10088,
		"OnBeginPursueTargetState":             10089,
		"OnBeginTrappedState":                  10090,
		"OnCloneCreature":                      10091,
		"OnCloneFailure":                       10092,
		"OnCloneFinished":                      10093,
		"OnCloneSuccess":                       10094,
		"OnCollide":                            10095,
		"OnConsumeRPC":                         10096,
		"OnConversionProgressDecayed":          10097,
		"OnConversionPulseHit":                 10098,
		"OnConvertPlayer":                      10099,
		"OnDeploy":                             10100,
		"OnDisarm":                             10101,
		"OnDoFuel":                             10102,
		"OnDoRoarAoE":                          10103,
		"OnDrop":                               10104,
		"OnEndCautionState":                    10105,
		"OnEndDamagedState":                    10106,
		"OnEndDraggingPlayer":                  10107,
		"OnEndEatingState":                     10108,
		"OnEndInvestigateThreatState":          10109,
		"OnEndTrappedState":                    10110,
		"OnFearApplied":                        10111,
		"OnFearReverted":                       10112,
		"OnFinishedDying":                      10113,
		"OnGotoRagdoll":                        10114,
		"OnItemsCrateFound":                    10116,
		"OnLabOpened":                          10117,
		"OnLogBonusObjectiveCompleteEvent":     10118,
		"OnLogBunkerOpenedEvent":               10119,
		"OnLogHunterRevealedEvent":             10120,
		"OnLogIdentityStealEvent":              10121,
		"OnLogPlayerClonedEvent":               10122,
		"OnLogPlayerDeathEvent":                10123,
		"OnLogSerumLabOpenedEvent":             10124,
		"OnLogUsedTruthSerumEvent":             10125,
		"OnMedicAbilityHit":                    10126,
		"OnPadreBoost":                         10127,
		"OnPickup":                             10128,
		"OnRagdollApplied":                     10129,
		"OnRagdollReverted":                    10130,
		"OnSetInYellowFlagPoint":               10131,
		"OnSetUsingMainCamera":                 10132,
		"OnSleeperAbilityHit":                  10133,
		"OnStartDraggingPlayer":                10134,
		"OnStateChange":                        10135,
		"OnStealRole":                          10136,
		"OnSurvivorAirdropAccessed":            10137,
		"OnSwapBodyDebug":                      10138,
		"OnSwapClothes":                        10139,
		"OnSwapPlayerClass":                    10140,
		"OnSwapPlayerRole":                     10141,
		"OnThrow":                              10142,
		"OnTranquilizationApplied":             10143,
		"OnTranquilizationReverted":            10144,
		"OnTriggerAltPFX":                      10145,
		"OpenBunkers":                          10146,
		"Overload":                             10147,
		"PlayAbsorbPfxForTraitor":              10148,
		"PlayEmoteAnim":                        10149,
		"PlayerDisconnected":                   10150,
		"PlayFeedbackSfx":                      10151,
		"PlayFireSfx":                          10152,
		"PlayGiggleSfxRPC":                     10153,
		"PlayReloadSfx":                        10154,
		"ProcessDamageEvent":                   10155,
		"PunDropChange":                        10156,
		"PunHealthChange":                      10157,
		"PunHungerChange":                      10158,
		"RematchSelectedRPC":                   10159,
		"RemovePfxRPC":                         10160,
		"RequestStateChange":                   10161,
		"ResetDisplayTextRPC":                  10162,
		"Revive":                               10163,
		"RotateSign":                           10164,
		"SabotageEscapeRPC":                    10165,
		"SendSetGroundState":                   10166,
		"SetAbility":                           10167,
		"SetBeaconStateRPC":                    10168,
		"SetCurrentNode":                       10169,
		"SetDropPosition":                      10170,
		"SetEffectRPC":                         10171,
		"SetLeaderViewId":                      10172,
		"SetStartHealthForAll":                 10173,
		"SetStateID":                           10174,
		"SetTerminalsCount":                    10175,
		"SetTimerFinishedRPC":                  10176,
		"SetUnitActivation":                    10177,
		"SetupKnockdownState":                  10178,
		"SetVulnerableToConversion":            10179,
		"SetWaveIndex":                         10180,
		"ShowGameObject":                       10181,
		"ShowSabotagedIndicator":               10182,
		"ShowSabotageIconRPC":                  10183,
		"SourceItemSyncValue":                  10184,
		"SpawnGasBubbleRPC":                    10185,
		"SpawnParticles":                       10186,
		"SpreadMadnessRPC":                     10187,
		"StartEvent":                           10188,
		"StartLeaveSequence":                   10189,
		"StopEvent":                            10190,
		"SyncDisableGlobalEvents":              10191,
		"SyncFirstObjectiveOverride":           10192,
		"SyncMVPStats":                         10193,
		"SyncOverrideGameSetting":              10194,
		"SyncPreSelectedBonusObjective":        10195,
		"SyncPreSelectedPlayerRole":            10196,
		"SyncPreSelectedTraitors":              10197,
		"SyncReviveTimer":                      10198,
		"SyncStatRPC":                          10199,
		"ToggleIndicator":                      10200,
		"TrackAnimalFedRPC":                    10201,
		"TrapAndReleaseRPC":                    10202,
		"TriggerAreaEffectRPC":                 10203,
		"TriggerPfxRPC":                        10204,
		"UdpdateRadioSlot":                     10205,
		"UdpdateSlots":                         10206,
		"UpdateBonusObjectiveStatus":           10207,
		"UpdateContributorsRPC":                10208,
		"UpdateConversionProgress":             10209,
		"UpdateHealth":                         10210,
		"UpdateInventory":                      10211,
		"UpdateKeypadStateRPC":                 10212,
		"UpdateLockStatus":                     10213,
		"UpdateMuscle":                         10214,
		"UpdateNumberOfTraitors":               10215,
		"UpdatePlayerState":                    10216,
		"UpdatePoints":                         10217,
		"UpdateReadyCount":                     10218,
		"UpdateSlots":                          10219,
		"UpdateTaskUI":                         10220,
		"UpdateVoting":                         10221,
		"OpenCloseDoor":                        10222,
		"BackpackCrafted":                      10223,
		"OnBackpackStolen":                     10224,
		"SyncProximityVoiceSettingsRPC":        10225,
		"HideNameplateRPC":                     10226,
		"ShowNameplateRPC":                     10227,
		"KillInstantlyRPC":                     10228,
		"OnSabotageInAdvance":                  10229,
		"Sabotage":                             10230,
		"MoveItemRPC":                          10231,
		"SourceItemSyncValueList":              10232,
		"OnImpactRPCProjectile":                10233,
		"OnImpactRPCThrowable":                 10234,
	}
)

func (x EventId) Enum() *EventId {
	p := new(EventId)
	*p = x
	return p
}

func (x EventId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventId) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_proto_enumTypes[1].Descriptor()
}

func (EventId) Type() protoreflect.EnumType {
	return &file_Common_proto_enumTypes[1]
}

func (x EventId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EventId.Descriptor instead.
func (EventId) EnumDescriptor() ([]byte, []int) {
	return file_Common_proto_rawDescGZIP(), []int{1}
}

type PlayerStatusEnum int32

const (
	PlayerStatusEnum_NO_CONNECTED   PlayerStatusEnum = 0
	PlayerStatusEnum_CONNECTED      PlayerStatusEnum = 1
	PlayerStatusEnum_READY          PlayerStatusEnum = 2
	PlayerStatusEnum_PLAY           PlayerStatusEnum = 3
	PlayerStatusEnum_LOST_CONNECTED PlayerStatusEnum = 4
	PlayerStatusEnum_LEAVE          PlayerStatusEnum = 5
	PlayerStatusEnum_FINISHED       PlayerStatusEnum = 6
)

// Enum value maps for PlayerStatusEnum.
var (
	PlayerStatusEnum_name = map[int32]string{
		0: "NO_CONNECTED",
		1: "CONNECTED",
		2: "READY",
		3: "PLAY",
		4: "LOST_CONNECTED",
		5: "LEAVE",
		6: "FINISHED",
	}
	PlayerStatusEnum_value = map[string]int32{
		"NO_CONNECTED":   0,
		"CONNECTED":      1,
		"READY":          2,
		"PLAY":           3,
		"LOST_CONNECTED": 4,
		"LEAVE":          5,
		"FINISHED":       6,
	}
)

func (x PlayerStatusEnum) Enum() *PlayerStatusEnum {
	p := new(PlayerStatusEnum)
	*p = x
	return p
}

func (x PlayerStatusEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PlayerStatusEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_proto_enumTypes[2].Descriptor()
}

func (PlayerStatusEnum) Type() protoreflect.EnumType {
	return &file_Common_proto_enumTypes[2]
}

func (x PlayerStatusEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PlayerStatusEnum.Descriptor instead.
func (PlayerStatusEnum) EnumDescriptor() ([]byte, []int) {
	return file_Common_proto_rawDescGZIP(), []int{2}
}

type RpcTarget int32

const (
	RpcTarget_All                  RpcTarget = 0
	RpcTarget_Others               RpcTarget = 1
	RpcTarget_MasterClient         RpcTarget = 2
	RpcTarget_AllBuffered          RpcTarget = 3
	RpcTarget_OthersBuffered       RpcTarget = 4
	RpcTarget_AllViaServer         RpcTarget = 5
	RpcTarget_AllBufferedViaServer RpcTarget = 6
)

// Enum value maps for RpcTarget.
var (
	RpcTarget_name = map[int32]string{
		0: "All",
		1: "Others",
		2: "MasterClient",
		3: "AllBuffered",
		4: "OthersBuffered",
		5: "AllViaServer",
		6: "AllBufferedViaServer",
	}
	RpcTarget_value = map[string]int32{
		"All":                  0,
		"Others":               1,
		"MasterClient":         2,
		"AllBuffered":          3,
		"OthersBuffered":       4,
		"AllViaServer":         5,
		"AllBufferedViaServer": 6,
	}
)

func (x RpcTarget) Enum() *RpcTarget {
	p := new(RpcTarget)
	*p = x
	return p
}

func (x RpcTarget) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RpcTarget) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_proto_enumTypes[3].Descriptor()
}

func (RpcTarget) Type() protoreflect.EnumType {
	return &file_Common_proto_enumTypes[3]
}

func (x RpcTarget) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RpcTarget.Descriptor instead.
func (RpcTarget) EnumDescriptor() ([]byte, []int) {
	return file_Common_proto_rawDescGZIP(), []int{3}
}

type ErrorCodeEnum int32

const (
	ErrorCodeEnum_SUCCESS          ErrorCodeEnum = 0
	ErrorCodeEnum_ROOM_NOT_EXIST   ErrorCodeEnum = 1
	ErrorCodeEnum_PLAYER_NOT_EXIST ErrorCodeEnum = 2
	ErrorCodeEnum_TOKEN_INVALID    ErrorCodeEnum = 3
)

// Enum value maps for ErrorCodeEnum.
var (
	ErrorCodeEnum_name = map[int32]string{
		0: "SUCCESS",
		1: "ROOM_NOT_EXIST",
		2: "PLAYER_NOT_EXIST",
		3: "TOKEN_INVALID",
	}
	ErrorCodeEnum_value = map[string]int32{
		"SUCCESS":          0,
		"ROOM_NOT_EXIST":   1,
		"PLAYER_NOT_EXIST": 2,
		"TOKEN_INVALID":    3,
	}
)

func (x ErrorCodeEnum) Enum() *ErrorCodeEnum {
	p := new(ErrorCodeEnum)
	*p = x
	return p
}

func (x ErrorCodeEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ErrorCodeEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_proto_enumTypes[4].Descriptor()
}

func (ErrorCodeEnum) Type() protoreflect.EnumType {
	return &file_Common_proto_enumTypes[4]
}

func (x ErrorCodeEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ErrorCodeEnum.Descriptor instead.
func (ErrorCodeEnum) EnumDescriptor() ([]byte, []int) {
	return file_Common_proto_rawDescGZIP(), []int{4}
}

type ErroCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error uint32 `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *ErroCode) Reset() {
	*x = ErroCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Common_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ErroCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErroCode) ProtoMessage() {}

func (x *ErroCode) ProtoReflect() protoreflect.Message {
	mi := &file_Common_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErroCode.ProtoReflect.Descriptor instead.
func (*ErroCode) Descriptor() ([]byte, []int) {
	return file_Common_proto_rawDescGZIP(), []int{0}
}

func (x *ErroCode) GetError() uint32 {
	if x != nil {
		return x.Error
	}
	return 0
}

type RoomInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SettingIndex      int32  `protobuf:"varint,1,opt,name=settingIndex,proto3" json:"settingIndex,omitempty"`
	Seed              int32  `protobuf:"varint,2,opt,name=seed,proto3" json:"seed,omitempty"`
	Language          string `protobuf:"bytes,3,opt,name=language,proto3" json:"language,omitempty"`
	NoPassword        string `protobuf:"bytes,4,opt,name=noPassword,proto3" json:"noPassword,omitempty"`
	GameMode          int32  `protobuf:"varint,5,opt,name=gameMode,proto3" json:"gameMode,omitempty"`
	DlcMode           int32  `protobuf:"varint,6,opt,name=dlcMode,proto3" json:"dlcMode,omitempty"`
	Lr                bool   `protobuf:"varint,7,opt,name=lr,proto3" json:"lr,omitempty"`
	RematchVersion    int32  `protobuf:"varint,8,opt,name=rematchVersion,proto3" json:"rematchVersion,omitempty"`
	NumRematchPlayers int32  `protobuf:"varint,9,opt,name=numRematchPlayers,proto3" json:"numRematchPlayers,omitempty"`
	Xplay             bool   `protobuf:"varint,10,opt,name=xplay,proto3" json:"xplay,omitempty"`
	Plat              string `protobuf:"bytes,11,opt,name=plat,proto3" json:"plat,omitempty"`
	// string creatorId = 12;  changed to creator pid
	CreatorPid         int64                 `protobuf:"varint,12,opt,name=creatorPid,proto3" json:"creatorPid,omitempty"`
	CreatorName        string                `protobuf:"bytes,13,opt,name=creatorName,proto3" json:"creatorName,omitempty"`
	RoomId             string                `protobuf:"bytes,14,opt,name=roomId,proto3" json:"roomId,omitempty"`
	BattleId           int64                 `protobuf:"varint,15,opt,name=battleId,proto3" json:"battleId,omitempty"`
	Sc                 int32                 `protobuf:"varint,16,opt,name=sc,proto3" json:"sc,omitempty"`
	ExpectedMaster     int64                 `protobuf:"varint,17,opt,name=expectedMaster,proto3" json:"expectedMaster,omitempty"` //Master Id
	MasterLoaded       int32                 `protobuf:"varint,18,opt,name=masterLoaded,proto3" json:"masterLoaded,omitempty"`
	Password           string                `protobuf:"bytes,19,opt,name=password,proto3" json:"password,omitempty"`
	CustomGameSettings *ExpandedGameSettings `protobuf:"bytes,20,opt,name=customGameSettings,proto3" json:"customGameSettings,omitempty"`
	StartTime          int64                 `protobuf:"varint,21,opt,name=startTime,proto3" json:"startTime,omitempty"` //start Time
	EndTime            int64                 `protobuf:"varint,22,opt,name=endTime,proto3" json:"endTime,omitempty"`
	KickedPlayers      string                `protobuf:"bytes,23,opt,name=kickedPlayers,proto3" json:"kickedPlayers,omitempty"`
	PresetOwner        int32                 `protobuf:"varint,24,opt,name=presetOwner,proto3" json:"presetOwner,omitempty"`
	PresetName         string                `protobuf:"bytes,25,opt,name=presetName,proto3" json:"presetName,omitempty"`
	DevPreset          bool                  `protobuf:"varint,26,opt,name=devPreset,proto3" json:"devPreset,omitempty"`
}

func (x *RoomInfo) Reset() {
	*x = RoomInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Common_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomInfo) ProtoMessage() {}

func (x *RoomInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Common_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomInfo.ProtoReflect.Descriptor instead.
func (*RoomInfo) Descriptor() ([]byte, []int) {
	return file_Common_proto_rawDescGZIP(), []int{1}
}

func (x *RoomInfo) GetSettingIndex() int32 {
	if x != nil {
		return x.SettingIndex
	}
	return 0
}

func (x *RoomInfo) GetSeed() int32 {
	if x != nil {
		return x.Seed
	}
	return 0
}

func (x *RoomInfo) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *RoomInfo) GetNoPassword() string {
	if x != nil {
		return x.NoPassword
	}
	return ""
}

func (x *RoomInfo) GetGameMode() int32 {
	if x != nil {
		return x.GameMode
	}
	return 0
}

func (x *RoomInfo) GetDlcMode() int32 {
	if x != nil {
		return x.DlcMode
	}
	return 0
}

func (x *RoomInfo) GetLr() bool {
	if x != nil {
		return x.Lr
	}
	return false
}

func (x *RoomInfo) GetRematchVersion() int32 {
	if x != nil {
		return x.RematchVersion
	}
	return 0
}

func (x *RoomInfo) GetNumRematchPlayers() int32 {
	if x != nil {
		return x.NumRematchPlayers
	}
	return 0
}

func (x *RoomInfo) GetXplay() bool {
	if x != nil {
		return x.Xplay
	}
	return false
}

func (x *RoomInfo) GetPlat() string {
	if x != nil {
		return x.Plat
	}
	return ""
}

func (x *RoomInfo) GetCreatorPid() int64 {
	if x != nil {
		return x.CreatorPid
	}
	return 0
}

func (x *RoomInfo) GetCreatorName() string {
	if x != nil {
		return x.CreatorName
	}
	return ""
}

func (x *RoomInfo) GetRoomId() string {
	if x != nil {
		return x.RoomId
	}
	return ""
}

func (x *RoomInfo) GetBattleId() int64 {
	if x != nil {
		return x.BattleId
	}
	return 0
}

func (x *RoomInfo) GetSc() int32 {
	if x != nil {
		return x.Sc
	}
	return 0
}

func (x *RoomInfo) GetExpectedMaster() int64 {
	if x != nil {
		return x.ExpectedMaster
	}
	return 0
}

func (x *RoomInfo) GetMasterLoaded() int32 {
	if x != nil {
		return x.MasterLoaded
	}
	return 0
}

func (x *RoomInfo) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *RoomInfo) GetCustomGameSettings() *ExpandedGameSettings {
	if x != nil {
		return x.CustomGameSettings
	}
	return nil
}

func (x *RoomInfo) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *RoomInfo) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *RoomInfo) GetKickedPlayers() string {
	if x != nil {
		return x.KickedPlayers
	}
	return ""
}

func (x *RoomInfo) GetPresetOwner() int32 {
	if x != nil {
		return x.PresetOwner
	}
	return 0
}

func (x *RoomInfo) GetPresetName() string {
	if x != nil {
		return x.PresetName
	}
	return ""
}

func (x *RoomInfo) GetDevPreset() bool {
	if x != nil {
		return x.DevPreset
	}
	return false
}

type Player struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ColourIndex        int32            `protobuf:"varint,1,opt,name=colourIndex,proto3" json:"colourIndex,omitempty"`
	MvpStatsSynced     bool             `protobuf:"varint,2,opt,name=mvpStatsSynced,proto3" json:"mvpStatsSynced,omitempty"`
	TraitorChance      int32            `protobuf:"varint,3,opt,name=traitorChance,proto3" json:"traitorChance,omitempty"`
	VivoxId            string           `protobuf:"bytes,4,opt,name=vivoxId,proto3" json:"vivoxId,omitempty"`
	UniqueId           string           `protobuf:"bytes,5,opt,name=uniqueId,proto3" json:"uniqueId,omitempty"`
	IsBeginner         bool             `protobuf:"varint,6,opt,name=isBeginner,proto3" json:"isBeginner,omitempty"`
	IsSamePlatform     bool             `protobuf:"varint,7,opt,name=isSamePlatform,proto3" json:"isSamePlatform,omitempty"`
	IsLocal            bool             `protobuf:"varint,8,opt,name=isLocal,proto3" json:"isLocal,omitempty"`
	ActorNumber        int64            `protobuf:"varint,9,opt,name=actorNumber,proto3" json:"actorNumber,omitempty"`
	Pid                int64            `protobuf:"varint,10,opt,name=pid,proto3" json:"pid,omitempty"`
	Status             PlayerStatusEnum `protobuf:"varint,11,opt,name=status,proto3,enum=msg.PlayerStatusEnum" json:"status,omitempty"`
	PlayerName         string           `protobuf:"bytes,12,opt,name=playerName,proto3" json:"playerName,omitempty"`
	ReadyStatus        bool             `protobuf:"varint,13,opt,name=readyStatus,proto3" json:"readyStatus,omitempty"`
	PlayerColor        int32            `protobuf:"varint,14,opt,name=playerColor,proto3" json:"playerColor,omitempty"` //PC
	LoadStatus         bool             `protobuf:"varint,15,opt,name=loadStatus,proto3" json:"loadStatus,omitempty"`
	LevelManagerExists bool             `protobuf:"varint,16,opt,name=levelManagerExists,proto3" json:"levelManagerExists,omitempty"`
	PlayersReadyToPlay bool             `protobuf:"varint,17,opt,name=playersReadyToPlay,proto3" json:"playersReadyToPlay,omitempty"`
	SocialRatingScore  int32            `protobuf:"varint,18,opt,name=socialRatingScore,proto3" json:"socialRatingScore,omitempty"`
	//int32 traitorChance=19;
	FirstTimeUser bool   `protobuf:"varint,20,opt,name=firstTimeUser,proto3" json:"firstTimeUser,omitempty"`
	PlatForm      string `protobuf:"bytes,21,opt,name=platForm,proto3" json:"platForm,omitempty"`
	BoolPuddle    string `protobuf:"bytes,22,opt,name=boolPuddle,proto3" json:"boolPuddle,omitempty"`
}

func (x *Player) Reset() {
	*x = Player{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Common_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Player) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Player) ProtoMessage() {}

func (x *Player) ProtoReflect() protoreflect.Message {
	mi := &file_Common_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Player.ProtoReflect.Descriptor instead.
func (*Player) Descriptor() ([]byte, []int) {
	return file_Common_proto_rawDescGZIP(), []int{2}
}

func (x *Player) GetColourIndex() int32 {
	if x != nil {
		return x.ColourIndex
	}
	return 0
}

func (x *Player) GetMvpStatsSynced() bool {
	if x != nil {
		return x.MvpStatsSynced
	}
	return false
}

func (x *Player) GetTraitorChance() int32 {
	if x != nil {
		return x.TraitorChance
	}
	return 0
}

func (x *Player) GetVivoxId() string {
	if x != nil {
		return x.VivoxId
	}
	return ""
}

func (x *Player) GetUniqueId() string {
	if x != nil {
		return x.UniqueId
	}
	return ""
}

func (x *Player) GetIsBeginner() bool {
	if x != nil {
		return x.IsBeginner
	}
	return false
}

func (x *Player) GetIsSamePlatform() bool {
	if x != nil {
		return x.IsSamePlatform
	}
	return false
}

func (x *Player) GetIsLocal() bool {
	if x != nil {
		return x.IsLocal
	}
	return false
}

func (x *Player) GetActorNumber() int64 {
	if x != nil {
		return x.ActorNumber
	}
	return 0
}

func (x *Player) GetPid() int64 {
	if x != nil {
		return x.Pid
	}
	return 0
}

func (x *Player) GetStatus() PlayerStatusEnum {
	if x != nil {
		return x.Status
	}
	return PlayerStatusEnum_NO_CONNECTED
}

func (x *Player) GetPlayerName() string {
	if x != nil {
		return x.PlayerName
	}
	return ""
}

func (x *Player) GetReadyStatus() bool {
	if x != nil {
		return x.ReadyStatus
	}
	return false
}

func (x *Player) GetPlayerColor() int32 {
	if x != nil {
		return x.PlayerColor
	}
	return 0
}

func (x *Player) GetLoadStatus() bool {
	if x != nil {
		return x.LoadStatus
	}
	return false
}

func (x *Player) GetLevelManagerExists() bool {
	if x != nil {
		return x.LevelManagerExists
	}
	return false
}

func (x *Player) GetPlayersReadyToPlay() bool {
	if x != nil {
		return x.PlayersReadyToPlay
	}
	return false
}

func (x *Player) GetSocialRatingScore() int32 {
	if x != nil {
		return x.SocialRatingScore
	}
	return 0
}

func (x *Player) GetFirstTimeUser() bool {
	if x != nil {
		return x.FirstTimeUser
	}
	return false
}

func (x *Player) GetPlatForm() string {
	if x != nil {
		return x.PlatForm
	}
	return ""
}

func (x *Player) GetBoolPuddle() string {
	if x != nil {
		return x.BoolPuddle
	}
	return ""
}

type ExpandedGameSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ExpandedGameSettings) Reset() {
	*x = ExpandedGameSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Common_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExpandedGameSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExpandedGameSettings) ProtoMessage() {}

func (x *ExpandedGameSettings) ProtoReflect() protoreflect.Message {
	mi := &file_Common_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExpandedGameSettings.ProtoReflect.Descriptor instead.
func (*ExpandedGameSettings) Descriptor() ([]byte, []int) {
	return file_Common_proto_rawDescGZIP(), []int{3}
}

type UserRotator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value  int64 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	Sender int64 `protobuf:"varint,2,opt,name=sender,proto3" json:"sender,omitempty"`
}

func (x *UserRotator) Reset() {
	*x = UserRotator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Common_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserRotator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserRotator) ProtoMessage() {}

func (x *UserRotator) ProtoReflect() protoreflect.Message {
	mi := &file_Common_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserRotator.ProtoReflect.Descriptor instead.
func (*UserRotator) Descriptor() ([]byte, []int) {
	return file_Common_proto_rawDescGZIP(), []int{4}
}

func (x *UserRotator) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *UserRotator) GetSender() int64 {
	if x != nil {
		return x.Sender
	}
	return 0
}

type UserPos struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value  int64 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	Sender int64 `protobuf:"varint,2,opt,name=sender,proto3" json:"sender,omitempty"`
}

func (x *UserPos) Reset() {
	*x = UserPos{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Common_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserPos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserPos) ProtoMessage() {}

func (x *UserPos) ProtoReflect() protoreflect.Message {
	mi := &file_Common_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserPos.ProtoReflect.Descriptor instead.
func (*UserPos) Descriptor() ([]byte, []int) {
	return file_Common_proto_rawDescGZIP(), []int{5}
}

func (x *UserPos) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *UserPos) GetSender() int64 {
	if x != nil {
		return x.Sender
	}
	return 0
}

//object[]传递
type ByteStringArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataList [][]byte `protobuf:"bytes,1,rep,name=dataList,proto3" json:"dataList,omitempty"`
}

func (x *ByteStringArray) Reset() {
	*x = ByteStringArray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Common_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ByteStringArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ByteStringArray) ProtoMessage() {}

func (x *ByteStringArray) ProtoReflect() protoreflect.Message {
	mi := &file_Common_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ByteStringArray.ProtoReflect.Descriptor instead.
func (*ByteStringArray) Descriptor() ([]byte, []int) {
	return file_Common_proto_rawDescGZIP(), []int{6}
}

func (x *ByteStringArray) GetDataList() [][]byte {
	if x != nil {
		return x.DataList
	}
	return nil
}

//实例化Object的参数
type InstantiateParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ViewIDs        []int32          `protobuf:"varint,1,rep,packed,name=viewIDs,proto3" json:"viewIDs,omitempty"`
	ObjLevelPrefix int32            `protobuf:"varint,2,opt,name=objLevelPrefix,proto3" json:"objLevelPrefix,omitempty"`
	Data           *ByteStringArray `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	Group          int32            `protobuf:"varint,4,opt,name=group,proto3" json:"group,omitempty"`
	Rotation       int32            `protobuf:"varint,5,opt,name=rotation,proto3" json:"rotation,omitempty"`
	Position       int64            `protobuf:"varint,6,opt,name=position,proto3" json:"position,omitempty"`
	PrefabName     string           `protobuf:"bytes,7,opt,name=prefabName,proto3" json:"prefabName,omitempty"`
	Creator        *Player          `protobuf:"bytes,8,opt,name=creator,proto3" json:"creator,omitempty"`
	Timestamp      int32            `protobuf:"varint,9,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	SceneObject    bool             `protobuf:"varint,10,opt,name=sceneObject,proto3" json:"sceneObject,omitempty"`
}

func (x *InstantiateParameters) Reset() {
	*x = InstantiateParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Common_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstantiateParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstantiateParameters) ProtoMessage() {}

func (x *InstantiateParameters) ProtoReflect() protoreflect.Message {
	mi := &file_Common_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstantiateParameters.ProtoReflect.Descriptor instead.
func (*InstantiateParameters) Descriptor() ([]byte, []int) {
	return file_Common_proto_rawDescGZIP(), []int{7}
}

func (x *InstantiateParameters) GetViewIDs() []int32 {
	if x != nil {
		return x.ViewIDs
	}
	return nil
}

func (x *InstantiateParameters) GetObjLevelPrefix() int32 {
	if x != nil {
		return x.ObjLevelPrefix
	}
	return 0
}

func (x *InstantiateParameters) GetData() *ByteStringArray {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *InstantiateParameters) GetGroup() int32 {
	if x != nil {
		return x.Group
	}
	return 0
}

func (x *InstantiateParameters) GetRotation() int32 {
	if x != nil {
		return x.Rotation
	}
	return 0
}

func (x *InstantiateParameters) GetPosition() int64 {
	if x != nil {
		return x.Position
	}
	return 0
}

func (x *InstantiateParameters) GetPrefabName() string {
	if x != nil {
		return x.PrefabName
	}
	return ""
}

func (x *InstantiateParameters) GetCreator() *Player {
	if x != nil {
		return x.Creator
	}
	return nil
}

func (x *InstantiateParameters) GetTimestamp() int32 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *InstantiateParameters) GetSceneObject() bool {
	if x != nil {
		return x.SceneObject
	}
	return false
}

var File_Common_proto protoreflect.FileDescriptor

var file_Common_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03,
	0x6d, 0x73, 0x67, 0x22, 0x20, 0x0a, 0x08, 0x45, 0x72, 0x72, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xbb, 0x06, 0x0a, 0x08, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x65, 0x65, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x65, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x6f, 0x50, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x6f, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x4d, 0x6f,
	0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x6c, 0x63, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x64, 0x6c, 0x63, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x6c, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x6c, 0x72, 0x12, 0x26, 0x0a, 0x0e,
	0x72, 0x65, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x72, 0x65, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x11, 0x6e, 0x75, 0x6d, 0x52, 0x65, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x11, 0x6e, 0x75, 0x6d, 0x52, 0x65, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x78, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x05, 0x78, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6c, 0x61, 0x74,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6c, 0x61, 0x74, 0x12, 0x1e, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x49, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x73, 0x63, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02,
	0x73, 0x63, 0x12, 0x26, 0x0a, 0x0e, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x4d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x4c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x49, 0x0a, 0x12, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x45, 0x78, 0x70,
	0x61, 0x6e, 0x64, 0x65, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x52, 0x12, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a,
	0x0d, 0x6b, 0x69, 0x63, 0x6b, 0x65, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6b, 0x69, 0x63, 0x6b, 0x65, 0x64, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x4f, 0x77, 0x6e,
	0x65, 0x72, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74,
	0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x65, 0x73, 0x65,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x50, 0x72, 0x65, 0x73,
	0x65, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x64, 0x65, 0x76, 0x50, 0x72, 0x65,
	0x73, 0x65, 0x74, 0x22, 0xe7, 0x05, 0x0a, 0x06, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x20,
	0x0a, 0x0b, 0x63, 0x6f, 0x6c, 0x6f, 0x75, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x6f, 0x6c, 0x6f, 0x75, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x26, 0x0a, 0x0e, 0x6d, 0x76, 0x70, 0x53, 0x74, 0x61, 0x74, 0x73, 0x53, 0x79, 0x6e, 0x63,
	0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x6d, 0x76, 0x70, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x53, 0x79, 0x6e, 0x63, 0x65, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x69,
	0x74, 0x6f, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0d, 0x74, 0x72, 0x61, 0x69, 0x74, 0x6f, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x76, 0x69, 0x76, 0x6f, 0x78, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x76, 0x69, 0x76, 0x6f, 0x78, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x6e, 0x69, 0x71,
	0x75, 0x65, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x6e, 0x69, 0x71,
	0x75, 0x65, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x6e,
	0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x42, 0x65, 0x67, 0x69,
	0x6e, 0x6e, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x73, 0x53, 0x61, 0x6d, 0x65, 0x50, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73,
	0x53, 0x61, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x18, 0x0a, 0x07,
	0x69, 0x73, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69,
	0x73, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x70, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x6d, 0x73, 0x67,
	0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x75,
	0x6d, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x61,
	0x64, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b,
	0x72, 0x65, 0x61, 0x64, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x1e, 0x0a,
	0x0a, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2e, 0x0a,
	0x12, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x45, 0x78, 0x69,
	0x73, 0x74, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x12, 0x2e, 0x0a,
	0x12, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x52, 0x65, 0x61, 0x64, 0x79, 0x54, 0x6f, 0x50,
	0x6c, 0x61, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x61, 0x64, 0x79, 0x54, 0x6f, 0x50, 0x6c, 0x61, 0x79, 0x12, 0x2c, 0x0a,
	0x11, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c,
	0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x66,
	0x69, 0x72, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x73, 0x65, 0x72, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0d, 0x66, 0x69, 0x72, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x12, 0x1e, 0x0a,
	0x0a, 0x62, 0x6f, 0x6f, 0x6c, 0x50, 0x75, 0x64, 0x64, 0x6c, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x62, 0x6f, 0x6f, 0x6c, 0x50, 0x75, 0x64, 0x64, 0x6c, 0x65, 0x22, 0x16, 0x0a,
	0x14, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x65, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x3b, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x52, 0x6f, 0x74,
	0x61, 0x74, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x22, 0x37, 0x0a, 0x07, 0x55, 0x73, 0x65, 0x72, 0x50, 0x6f, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x22, 0x2d, 0x0a, 0x0f, 0x42,
	0x79, 0x74, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x1a,
	0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c,
	0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xd8, 0x02, 0x0a, 0x15, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x69, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x69, 0x65, 0x77, 0x49, 0x44, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x07, 0x76, 0x69, 0x65, 0x77, 0x49, 0x44, 0x73, 0x12, 0x26,
	0x0a, 0x0e, 0x6f, 0x62, 0x6a, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6f, 0x62, 0x6a, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x28, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x72, 0x72, 0x61, 0x79, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x14, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e,
	0x0a, 0x0a, 0x70, 0x72, 0x65, 0x66, 0x61, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x65, 0x66, 0x61, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25,
	0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x07, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x2a, 0x8f, 0x04, 0x0a, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12,
	0x09, 0x0a, 0x05, 0x42, 0x45, 0x47, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x48, 0x45,
	0x41, 0x52, 0x54, 0x42, 0x45, 0x41, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x10, 0x02, 0x12, 0x13, 0x0a,
	0x0e, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x52, 0x4f, 0x4f, 0x4d, 0x5f, 0x52, 0x45, 0x51, 0x10,
	0x88, 0x27, 0x12, 0x13, 0x0a, 0x0e, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x52, 0x4f, 0x4f, 0x4d,
	0x5f, 0x52, 0x45, 0x53, 0x10, 0x89, 0x27, 0x12, 0x13, 0x0a, 0x0e, 0x45, 0x4e, 0x54, 0x45, 0x52,
	0x5f, 0x52, 0x4f, 0x4f, 0x4d, 0x5f, 0x4d, 0x53, 0x47, 0x10, 0x8a, 0x27, 0x12, 0x13, 0x0a, 0x0e,
	0x47, 0x41, 0x4d, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x52, 0x45, 0x51, 0x10, 0xec,
	0x27, 0x12, 0x13, 0x0a, 0x0e, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f,
	0x52, 0x45, 0x53, 0x10, 0xed, 0x27, 0x12, 0x13, 0x0a, 0x0e, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x52,
	0x45, 0x41, 0x44, 0x59, 0x5f, 0x4d, 0x53, 0x47, 0x10, 0xee, 0x27, 0x12, 0x1a, 0x0a, 0x15, 0x55,
	0x53, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x45,
	0x5f, 0x4d, 0x53, 0x47, 0x10, 0xf7, 0x27, 0x12, 0x13, 0x0a, 0x0e, 0x47, 0x4d, 0x41, 0x45, 0x5f,
	0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x4d, 0x53, 0x47, 0x10, 0xd3, 0x28, 0x12, 0x13, 0x0a, 0x0e,
	0x4c, 0x45, 0x41, 0x56, 0x45, 0x5f, 0x52, 0x4f, 0x4f, 0x4d, 0x5f, 0x52, 0x45, 0x51, 0x10, 0xb4,
	0x29, 0x12, 0x13, 0x0a, 0x0e, 0x4c, 0x45, 0x41, 0x56, 0x45, 0x5f, 0x52, 0x4f, 0x4f, 0x4d, 0x5f,
	0x52, 0x45, 0x53, 0x10, 0xb5, 0x29, 0x12, 0x13, 0x0a, 0x0e, 0x4c, 0x45, 0x41, 0x56, 0x45, 0x5f,
	0x52, 0x4f, 0x4f, 0x4d, 0x5f, 0x4d, 0x53, 0x47, 0x10, 0xb6, 0x29, 0x12, 0x11, 0x0a, 0x0c, 0x55,
	0x53, 0x45, 0x52, 0x5f, 0x4f, 0x50, 0x54, 0x5f, 0x4d, 0x53, 0x47, 0x10, 0x9a, 0x2a, 0x12, 0x1b,
	0x0a, 0x16, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f,
	0x49, 0x4e, 0x46, 0x49, 0x5f, 0x52, 0x45, 0x51, 0x10, 0x9b, 0x2a, 0x12, 0x1b, 0x0a, 0x16, 0x42,
	0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x41, 0x54,
	0x41, 0x5f, 0x52, 0x45, 0x51, 0x10, 0x9d, 0x2a, 0x12, 0x1d, 0x0a, 0x18, 0x42, 0x41, 0x54, 0x54,
	0x4c, 0x45, 0x5f, 0x53, 0x4f, 0x4d, 0x45, 0x5f, 0x4f, 0x4e, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f,
	0x52, 0x45, 0x41, 0x59, 0x10, 0x9e, 0x2a, 0x12, 0x22, 0x0a, 0x1d, 0x42, 0x41, 0x54, 0x54, 0x4c,
	0x45, 0x5f, 0x52, 0x4f, 0x4f, 0x4d, 0x5f, 0x4d, 0x41, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x43, 0x48,
	0x41, 0x4e, 0x47, 0x45, 0x5f, 0x4d, 0x53, 0x47, 0x10, 0xa1, 0x2a, 0x12, 0x14, 0x0a, 0x0f, 0x49,
	0x4e, 0x53, 0x54, 0x41, 0x4e, 0x54, 0x49, 0x41, 0x54, 0x45, 0x5f, 0x4d, 0x53, 0x47, 0x10, 0xa2,
	0x2a, 0x12, 0x12, 0x0a, 0x0d, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4d, 0x4f, 0x56, 0x45, 0x5f, 0x50,
	0x4f, 0x53, 0x10, 0xf0, 0x2e, 0x12, 0x18, 0x0a, 0x13, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x43, 0x48,
	0x41, 0x4e, 0x47, 0x45, 0x5f, 0x52, 0x4f, 0x54, 0x41, 0x54, 0x4f, 0x52, 0x10, 0xf1, 0x2e, 0x12,
	0x14, 0x0a, 0x0e, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x41, 0x4e, 0x49, 0x4d, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0xe2, 0xd4, 0x03, 0x12, 0x10, 0x0a, 0x0b, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x46, 0x49,
	0x4e, 0x49, 0x53, 0x48, 0x10, 0xfc, 0x2a, 0x2a, 0xec, 0x2a, 0x0a, 0x07, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x42, 0x45, 0x47,
	0x49, 0x4e, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x08, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x10, 0x90, 0x4e, 0x12, 0x14, 0x0a, 0x0f, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x41,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x10, 0x91, 0x4e, 0x12, 0x1b, 0x0a, 0x16, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x10, 0x92, 0x4e, 0x12, 0x13, 0x0a, 0x0e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x45, 0x73, 0x63, 0x61, 0x70, 0x65, 0x10, 0x93, 0x4e, 0x12, 0x11, 0x0a, 0x0c, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x10, 0x94, 0x4e, 0x12, 0x19,
	0x0a, 0x14, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x62, 0x6c, 0x65,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x10, 0x95, 0x4e, 0x12, 0x19, 0x0a, 0x14, 0x41, 0x64, 0x64,
	0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x4f, 0x76, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x50,
	0x43, 0x10, 0x96, 0x4e, 0x12, 0x14, 0x0a, 0x0f, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x41, 0x72, 0x65,
	0x61, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x10, 0x97, 0x4e, 0x12, 0x11, 0x0a, 0x0c, 0x42, 0x65,
	0x67, 0x69, 0x6e, 0x45, 0x6e, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x10, 0x98, 0x4e, 0x12, 0x20, 0x0a,
	0x1b, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x72, 0x6f,
	0x61, 0x63, 0x68, 0x46, 0x6f, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x10, 0x99, 0x4e, 0x12,
	0x14, 0x0a, 0x0f, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x45, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x6e,
	0x69, 0x6d, 0x10, 0x9a, 0x4e, 0x12, 0x15, 0x0a, 0x10, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x46,
	0x6c, 0x61, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x10, 0x9b, 0x4e, 0x12, 0x16, 0x0a, 0x11,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x52, 0x50,
	0x43, 0x10, 0x9c, 0x4e, 0x12, 0x14, 0x0a, 0x0f, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x52, 0x50, 0x43, 0x10, 0x9d, 0x4e, 0x12, 0x13, 0x0a, 0x0e, 0x43, 0x6c,
	0x65, 0x61, 0x72, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x52, 0x50, 0x43, 0x10, 0x9e, 0x4e, 0x12,
	0x0d, 0x0a, 0x08, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x52, 0x70, 0x63, 0x10, 0x9f, 0x4e, 0x12, 0x15,
	0x0a, 0x10, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x52,
	0x50, 0x43, 0x10, 0xa0, 0x4e, 0x12, 0x0f, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d,
	0x48, 0x69, 0x74, 0x10, 0xa1, 0x4e, 0x12, 0x0c, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d,
	0x65, 0x10, 0xa2, 0x4e, 0x12, 0x10, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x49,
	0x74, 0x65, 0x6d, 0x10, 0xa3, 0x4e, 0x12, 0x18, 0x0a, 0x13, 0x44, 0x65, 0x62, 0x75, 0x67, 0x53,
	0x70, 0x61, 0x77, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x50, 0x43, 0x10, 0xa4, 0x4e,
	0x12, 0x1a, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x53, 0x65, 0x74, 0x75, 0x70,
	0x46, 0x6f, 0x72, 0x52, 0x65, 0x76, 0x69, 0x76, 0x65, 0x10, 0xa5, 0x4e, 0x12, 0x0f, 0x0a, 0x0a,
	0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x70, 0x63, 0x10, 0xa6, 0x4e, 0x12, 0x09, 0x0a,
	0x04, 0x44, 0x69, 0x65, 0x64, 0x10, 0xa7, 0x4e, 0x12, 0x13, 0x0a, 0x0e, 0x44, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x41, 0x6e, 0x69, 0x6d, 0x52, 0x50, 0x43, 0x10, 0xa8, 0x4e, 0x12, 0x12, 0x0a,
	0x0d, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x65, 0x73, 0x68, 0x65, 0x73, 0x10, 0xa9,
	0x4e, 0x12, 0x1c, 0x0a, 0x17, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x10, 0xaa, 0x4e, 0x12,
	0x17, 0x0a, 0x12, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x61, 0x64, 0x69, 0x6f, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0xab, 0x4e, 0x12, 0x1a, 0x0a, 0x15, 0x44, 0x6f, 0x43, 0x6f,
	0x6e, 0x73, 0x75, 0x6d, 0x65, 0x45, 0x71, 0x75, 0x69, 0x70, 0x70, 0x65, 0x64, 0x49, 0x74, 0x65,
	0x6d, 0x10, 0xac, 0x4e, 0x12, 0x10, 0x0a, 0x0b, 0x44, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x73,
	0x69, 0x6f, 0x6e, 0x10, 0xad, 0x4e, 0x12, 0x0b, 0x0a, 0x06, 0x44, 0x6f, 0x4c, 0x6f, 0x6f, 0x6b,
	0x10, 0xae, 0x4e, 0x12, 0x0b, 0x0a, 0x06, 0x44, 0x6f, 0x50, 0x75, 0x6b, 0x65, 0x10, 0xaf, 0x4e,
	0x12, 0x0b, 0x0a, 0x06, 0x44, 0x6f, 0x52, 0x6f, 0x61, 0x72, 0x10, 0xb0, 0x4e, 0x12, 0x10, 0x0a,
	0x0b, 0x44, 0x6f, 0x53, 0x65, 0x74, 0x54, 0x6f, 0x49, 0x64, 0x6c, 0x65, 0x10, 0xb1, 0x4e, 0x12,
	0x10, 0x0a, 0x0b, 0x44, 0x6f, 0x53, 0x68, 0x6f, 0x77, 0x45, 0x6d, 0x6f, 0x74, 0x65, 0x10, 0xb2,
	0x4e, 0x12, 0x1b, 0x0a, 0x16, 0x44, 0x6f, 0x53, 0x68, 0x6f, 0x77, 0x54, 0x72, 0x75, 0x74, 0x68,
	0x53, 0x65, 0x72, 0x75, 0x6d, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x10, 0xb3, 0x4e, 0x12, 0x1b,
	0x0a, 0x16, 0x44, 0x6f, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50,
	0x72, 0x65, 0x73, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x10, 0xb4, 0x4e, 0x12, 0x20, 0x0a, 0x1b, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x62, 0x6c, 0x65,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x50, 0x43, 0x10, 0xb5, 0x4e, 0x12, 0x0c, 0x0a,
	0x07, 0x45, 0x6e, 0x64, 0x50, 0x75, 0x6b, 0x65, 0x10, 0xb6, 0x4e, 0x12, 0x1e, 0x0a, 0x19, 0x45,
	0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x61, 0x63, 0x68, 0x46,
	0x6f, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x10, 0xb7, 0x4e, 0x12, 0x21, 0x0a, 0x1c, 0x45,
	0x71, 0x75, 0x69, 0x70, 0x47, 0x61, 0x6d, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x6e,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x6c, 0x6f, 0x74, 0x10, 0xb8, 0x4e, 0x12, 0x10,
	0x0a, 0x0b, 0x45, 0x73, 0x63, 0x61, 0x70, 0x65, 0x52, 0x65, 0x61, 0x64, 0x79, 0x10, 0xb9, 0x4e,
	0x12, 0x17, 0x0a, 0x12, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x42, 0x75, 0x6e, 0x6b, 0x65, 0x72, 0x4f,
	0x70, 0x65, 0x6e, 0x52, 0x50, 0x43, 0x10, 0xba, 0x4e, 0x12, 0x0f, 0x0a, 0x0a, 0x46, 0x6f, 0x72,
	0x63, 0x65, 0x52, 0x65, 0x61, 0x64, 0x79, 0x10, 0xbb, 0x4e, 0x12, 0x11, 0x0a, 0x0c, 0x46, 0x72,
	0x65, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x72, 0x61, 0x70, 0x10, 0xbc, 0x4e, 0x12, 0x0d, 0x0a,
	0x08, 0x47, 0x61, 0x6d, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x10, 0xbd, 0x4e, 0x12, 0x13, 0x0a, 0x0e,
	0x48, 0x69, 0x64, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x10, 0xbe,
	0x4e, 0x12, 0x16, 0x0a, 0x11, 0x48, 0x6f, 0x73, 0x74, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x52, 0x50, 0x43, 0x10, 0xbf, 0x4e, 0x12, 0x13, 0x0a, 0x0e, 0x49, 0x6e, 0x69,
	0x74, 0x44, 0x65, 0x61, 0x64, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x10, 0xc0, 0x4e, 0x12, 0x16,
	0x0a, 0x11, 0x49, 0x6e, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x57,
	0x61, 0x76, 0x65, 0x10, 0xc1, 0x4e, 0x12, 0x0d, 0x0a, 0x08, 0x49, 0x6e, 0x69, 0x74, 0x48, 0x65,
	0x72, 0x64, 0x10, 0xc2, 0x4e, 0x12, 0x18, 0x0a, 0x13, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x10, 0xc3, 0x4e, 0x12,
	0x17, 0x0a, 0x12, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x52, 0x50, 0x43, 0x10, 0xc4, 0x4e, 0x12, 0x11, 0x0a, 0x0c, 0x49, 0x6e, 0x69, 0x74,
	0x69, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x10, 0xc5, 0x4e, 0x12, 0x15, 0x0a, 0x10, 0x49,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x54, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x10,
	0xc6, 0x4e, 0x12, 0x12, 0x0a, 0x0d, 0x49, 0x6e, 0x69, 0x74, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74,
	0x6f, 0x72, 0x79, 0x10, 0xc7, 0x4e, 0x12, 0x17, 0x0a, 0x12, 0x4b, 0x69, 0x6c, 0x6c, 0x46, 0x72,
	0x6f, 0x6d, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x10, 0xc8, 0x4e, 0x12,
	0x13, 0x0a, 0x0e, 0x4c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x52, 0x50,
	0x43, 0x10, 0xc9, 0x4e, 0x12, 0x13, 0x0a, 0x0e, 0x4c, 0x6f, 0x67, 0x44, 0x61, 0x6d, 0x61, 0x67,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x10, 0xca, 0x4e, 0x12, 0x12, 0x0a, 0x0d, 0x4c, 0x6f, 0x67,
	0x46, 0x61, 0x6c, 0x6c, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x10, 0xcb, 0x4e, 0x12, 0x10, 0x0a,
	0x0b, 0x4d, 0x61, 0x72, 0x6b, 0x49, 0x6e, 0x55, 0x73, 0x65, 0x42, 0x79, 0x10, 0xcc, 0x4e, 0x12,
	0x12, 0x0a, 0x0d, 0x4d, 0x61, 0x72, 0x6b, 0x53, 0x61, 0x62, 0x6f, 0x74, 0x61, 0x67, 0x65, 0x64,
	0x10, 0xcd, 0x4e, 0x12, 0x15, 0x0a, 0x10, 0x4d, 0x61, 0x72, 0x6b, 0x57, 0x61, 0x76, 0x65, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x10, 0xce, 0x4e, 0x12, 0x13, 0x0a, 0x0e, 0x4d, 0x69,
	0x67, 0x72, 0x61, 0x74, 0x65, 0x41, 0x69, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x10, 0xcf, 0x4e, 0x12,
	0x15, 0x0a, 0x10, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x45, 0x73, 0x63, 0x61, 0x70, 0x65, 0x4c,
	0x65, 0x66, 0x74, 0x10, 0xd0, 0x4e, 0x12, 0x15, 0x0a, 0x10, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x4c, 0x6f, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x10, 0xd1, 0x4e, 0x12, 0x1c, 0x0a,
	0x17, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x52, 0x50, 0x43, 0x10, 0xd2, 0x4e, 0x12, 0x18, 0x0a, 0x13, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x6f, 0x61, 0x72, 0x64,
	0x65, 0x64, 0x10, 0xd3, 0x4e, 0x12, 0x15, 0x0a, 0x10, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x69, 0x65, 0x64, 0x10, 0xd4, 0x4e, 0x12, 0x1c, 0x0a, 0x17,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x69, 0x73, 0x65,
	0x6d, 0x62, 0x61, 0x72, 0x6b, 0x65, 0x64, 0x10, 0xd5, 0x4e, 0x12, 0x1e, 0x0a, 0x19, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x63, 0x61, 0x70, 0x61,
	0x63, 0x69, 0x74, 0x61, 0x74, 0x65, 0x64, 0x10, 0xd6, 0x4e, 0x12, 0x15, 0x0a, 0x10, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4c, 0x65, 0x66, 0x74, 0x10, 0xd7,
	0x4e, 0x12, 0x1c, 0x0a, 0x17, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x53, 0x75, 0x72, 0x76, 0x69,
	0x76, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x64, 0x10, 0xd8, 0x4e, 0x12,
	0x1a, 0x0a, 0x15, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x59, 0x65, 0x74, 0x69, 0x4f, 0x62, 0x6a,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x10, 0xd9, 0x4e, 0x12, 0x13, 0x0a, 0x0e, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x65, 0x64, 0x10, 0xda, 0x4e,
	0x12, 0x16, 0x0a, 0x11, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x70, 0x61, 0x69, 0x72,
	0x65, 0x64, 0x52, 0x50, 0x43, 0x10, 0xdb, 0x4e, 0x12, 0x14, 0x0a, 0x0f, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x53, 0x61, 0x62, 0x6f, 0x74, 0x61, 0x67, 0x65, 0x64, 0x10, 0xdc, 0x4e, 0x12, 0x1c,
	0x0a, 0x17, 0x4f, 0x6e, 0x41, 0x6c, 0x69, 0x65, 0x6e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63,
	0x74, 0x4e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x10, 0xdd, 0x4e, 0x12, 0x1c, 0x0a, 0x17,
	0x4f, 0x6e, 0x41, 0x6c, 0x69, 0x65, 0x6e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x10, 0xde, 0x4e, 0x12, 0x1a, 0x0a, 0x15, 0x4f, 0x6e,
	0x41, 0x6c, 0x6c, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x73, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x10, 0xdf, 0x4e, 0x12, 0x12, 0x0a, 0x0d, 0x4f, 0x6e, 0x41, 0x6d, 0x6d, 0x6f,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x10, 0xe0, 0x4e, 0x12, 0x10, 0x0a, 0x0b, 0x4f, 0x6e,
	0x41, 0x70, 0x70, 0x6c, 0x79, 0x54, 0x72, 0x61, 0x70, 0x10, 0xe1, 0x4e, 0x12, 0x17, 0x0a, 0x12,
	0x4f, 0x6e, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x10, 0xe2, 0x4e, 0x12, 0x18, 0x0a, 0x13, 0x4f, 0x6e, 0x42, 0x65, 0x67, 0x69, 0x6e,
	0x43, 0x61, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x10, 0xe3, 0x4e, 0x12,
	0x18, 0x0a, 0x13, 0x4f, 0x6e, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x10, 0xe4, 0x4e, 0x12, 0x16, 0x0a, 0x11, 0x4f, 0x6e, 0x42,
	0x65, 0x67, 0x69, 0x6e, 0x44, 0x65, 0x61, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x10, 0xe5,
	0x4e, 0x12, 0x17, 0x0a, 0x12, 0x4f, 0x6e, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x45, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x10, 0xe6, 0x4e, 0x12, 0x29, 0x0a, 0x24, 0x4f, 0x6e,
	0x42, 0x65, 0x67, 0x69, 0x6e, 0x49, 0x6d, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x6c, 0x79,
	0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x6f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x10, 0xe7, 0x4e, 0x12, 0x17, 0x0a, 0x12, 0x4f, 0x6e, 0x42, 0x65, 0x67, 0x69, 0x6e,
	0x50, 0x61, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x10, 0xe8, 0x4e, 0x12, 0x1d,
	0x0a, 0x18, 0x4f, 0x6e, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x50, 0x75, 0x72, 0x73, 0x75, 0x65, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x10, 0xe9, 0x4e, 0x12, 0x18, 0x0a,
	0x13, 0x4f, 0x6e, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x72, 0x61, 0x70, 0x70, 0x65, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x10, 0xea, 0x4e, 0x12, 0x14, 0x0a, 0x0f, 0x4f, 0x6e, 0x43, 0x6c, 0x6f,
	0x6e, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x10, 0xeb, 0x4e, 0x12, 0x13, 0x0a,
	0x0e, 0x4f, 0x6e, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x10,
	0xec, 0x4e, 0x12, 0x14, 0x0a, 0x0f, 0x4f, 0x6e, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x46, 0x69, 0x6e,
	0x69, 0x73, 0x68, 0x65, 0x64, 0x10, 0xed, 0x4e, 0x12, 0x13, 0x0a, 0x0e, 0x4f, 0x6e, 0x43, 0x6c,
	0x6f, 0x6e, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0xee, 0x4e, 0x12, 0x0e, 0x0a,
	0x09, 0x4f, 0x6e, 0x43, 0x6f, 0x6c, 0x6c, 0x69, 0x64, 0x65, 0x10, 0xef, 0x4e, 0x12, 0x11, 0x0a,
	0x0c, 0x4f, 0x6e, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x52, 0x50, 0x43, 0x10, 0xf0, 0x4e,
	0x12, 0x20, 0x0a, 0x1b, 0x4f, 0x6e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x44, 0x65, 0x63, 0x61, 0x79, 0x65, 0x64, 0x10,
	0xf1, 0x4e, 0x12, 0x19, 0x0a, 0x14, 0x4f, 0x6e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x50, 0x75, 0x6c, 0x73, 0x65, 0x48, 0x69, 0x74, 0x10, 0xf2, 0x4e, 0x12, 0x14, 0x0a,
	0x0f, 0x4f, 0x6e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x10, 0xf3, 0x4e, 0x12, 0x0d, 0x0a, 0x08, 0x4f, 0x6e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x10,
	0xf4, 0x4e, 0x12, 0x0d, 0x0a, 0x08, 0x4f, 0x6e, 0x44, 0x69, 0x73, 0x61, 0x72, 0x6d, 0x10, 0xf5,
	0x4e, 0x12, 0x0d, 0x0a, 0x08, 0x4f, 0x6e, 0x44, 0x6f, 0x46, 0x75, 0x65, 0x6c, 0x10, 0xf6, 0x4e,
	0x12, 0x10, 0x0a, 0x0b, 0x4f, 0x6e, 0x44, 0x6f, 0x52, 0x6f, 0x61, 0x72, 0x41, 0x6f, 0x45, 0x10,
	0xf7, 0x4e, 0x12, 0x0b, 0x0a, 0x06, 0x4f, 0x6e, 0x44, 0x72, 0x6f, 0x70, 0x10, 0xf8, 0x4e, 0x12,
	0x16, 0x0a, 0x11, 0x4f, 0x6e, 0x45, 0x6e, 0x64, 0x43, 0x61, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x10, 0xf9, 0x4e, 0x12, 0x16, 0x0a, 0x11, 0x4f, 0x6e, 0x45, 0x6e, 0x64,
	0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x10, 0xfa, 0x4e, 0x12,
	0x18, 0x0a, 0x13, 0x4f, 0x6e, 0x45, 0x6e, 0x64, 0x44, 0x72, 0x61, 0x67, 0x67, 0x69, 0x6e, 0x67,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x10, 0xfb, 0x4e, 0x12, 0x15, 0x0a, 0x10, 0x4f, 0x6e, 0x45,
	0x6e, 0x64, 0x45, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x10, 0xfc, 0x4e,
	0x12, 0x20, 0x0a, 0x1b, 0x4f, 0x6e, 0x45, 0x6e, 0x64, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x69,
	0x67, 0x61, 0x74, 0x65, 0x54, 0x68, 0x72, 0x65, 0x61, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x10,
	0xfd, 0x4e, 0x12, 0x16, 0x0a, 0x11, 0x4f, 0x6e, 0x45, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x10, 0xfe, 0x4e, 0x12, 0x12, 0x0a, 0x0d, 0x4f, 0x6e,
	0x46, 0x65, 0x61, 0x72, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x10, 0xff, 0x4e, 0x12, 0x13,
	0x0a, 0x0e, 0x4f, 0x6e, 0x46, 0x65, 0x61, 0x72, 0x52, 0x65, 0x76, 0x65, 0x72, 0x74, 0x65, 0x64,
	0x10, 0x80, 0x4f, 0x12, 0x14, 0x0a, 0x0f, 0x4f, 0x6e, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x44, 0x79, 0x69, 0x6e, 0x67, 0x10, 0x81, 0x4f, 0x12, 0x12, 0x0a, 0x0d, 0x4f, 0x6e, 0x47,
	0x6f, 0x74, 0x6f, 0x52, 0x61, 0x67, 0x64, 0x6f, 0x6c, 0x6c, 0x10, 0x82, 0x4f, 0x12, 0x16, 0x0a,
	0x11, 0x4f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x43, 0x72, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x75,
	0x6e, 0x64, 0x10, 0x84, 0x4f, 0x12, 0x10, 0x0a, 0x0b, 0x4f, 0x6e, 0x4c, 0x61, 0x62, 0x4f, 0x70,
	0x65, 0x6e, 0x65, 0x64, 0x10, 0x85, 0x4f, 0x12, 0x25, 0x0a, 0x20, 0x4f, 0x6e, 0x4c, 0x6f, 0x67,
	0x42, 0x6f, 0x6e, 0x75, 0x73, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x10, 0x86, 0x4f, 0x12, 0x1b,
	0x0a, 0x16, 0x4f, 0x6e, 0x4c, 0x6f, 0x67, 0x42, 0x75, 0x6e, 0x6b, 0x65, 0x72, 0x4f, 0x70, 0x65,
	0x6e, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x10, 0x87, 0x4f, 0x12, 0x1d, 0x0a, 0x18, 0x4f,
	0x6e, 0x4c, 0x6f, 0x67, 0x48, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x65, 0x76, 0x65, 0x61, 0x6c,
	0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x10, 0x88, 0x4f, 0x12, 0x1c, 0x0a, 0x17, 0x4f, 0x6e,
	0x4c, 0x6f, 0x67, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x74, 0x65, 0x61, 0x6c,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x10, 0x89, 0x4f, 0x12, 0x1b, 0x0a, 0x16, 0x4f, 0x6e, 0x4c, 0x6f,
	0x67, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x64, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x10, 0x8a, 0x4f, 0x12, 0x1a, 0x0a, 0x15, 0x4f, 0x6e, 0x4c, 0x6f, 0x67, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x44, 0x65, 0x61, 0x74, 0x68, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x10, 0x8b,
	0x4f, 0x12, 0x1d, 0x0a, 0x18, 0x4f, 0x6e, 0x4c, 0x6f, 0x67, 0x53, 0x65, 0x72, 0x75, 0x6d, 0x4c,
	0x61, 0x62, 0x4f, 0x70, 0x65, 0x6e, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x10, 0x8c, 0x4f,
	0x12, 0x1d, 0x0a, 0x18, 0x4f, 0x6e, 0x4c, 0x6f, 0x67, 0x55, 0x73, 0x65, 0x64, 0x54, 0x72, 0x75,
	0x74, 0x68, 0x53, 0x65, 0x72, 0x75, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x10, 0x8d, 0x4f, 0x12,
	0x16, 0x0a, 0x11, 0x4f, 0x6e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x48, 0x69, 0x74, 0x10, 0x8e, 0x4f, 0x12, 0x11, 0x0a, 0x0c, 0x4f, 0x6e, 0x50, 0x61, 0x64,
	0x72, 0x65, 0x42, 0x6f, 0x6f, 0x73, 0x74, 0x10, 0x8f, 0x4f, 0x12, 0x0d, 0x0a, 0x08, 0x4f, 0x6e,
	0x50, 0x69, 0x63, 0x6b, 0x75, 0x70, 0x10, 0x90, 0x4f, 0x12, 0x15, 0x0a, 0x10, 0x4f, 0x6e, 0x52,
	0x61, 0x67, 0x64, 0x6f, 0x6c, 0x6c, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x10, 0x91, 0x4f,
	0x12, 0x16, 0x0a, 0x11, 0x4f, 0x6e, 0x52, 0x61, 0x67, 0x64, 0x6f, 0x6c, 0x6c, 0x52, 0x65, 0x76,
	0x65, 0x72, 0x74, 0x65, 0x64, 0x10, 0x92, 0x4f, 0x12, 0x1b, 0x0a, 0x16, 0x4f, 0x6e, 0x53, 0x65,
	0x74, 0x49, 0x6e, 0x59, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x46, 0x6c, 0x61, 0x67, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x10, 0x93, 0x4f, 0x12, 0x19, 0x0a, 0x14, 0x4f, 0x6e, 0x53, 0x65, 0x74, 0x55, 0x73,
	0x69, 0x6e, 0x67, 0x4d, 0x61, 0x69, 0x6e, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x10, 0x94, 0x4f,
	0x12, 0x18, 0x0a, 0x13, 0x4f, 0x6e, 0x53, 0x6c, 0x65, 0x65, 0x70, 0x65, 0x72, 0x41, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x48, 0x69, 0x74, 0x10, 0x95, 0x4f, 0x12, 0x1a, 0x0a, 0x15, 0x4f, 0x6e,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x72, 0x61, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x10, 0x96, 0x4f, 0x12, 0x12, 0x0a, 0x0d, 0x4f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x10, 0x97, 0x4f, 0x12, 0x10, 0x0a, 0x0b, 0x4f, 0x6e,
	0x53, 0x74, 0x65, 0x61, 0x6c, 0x52, 0x6f, 0x6c, 0x65, 0x10, 0x98, 0x4f, 0x12, 0x1e, 0x0a, 0x19,
	0x4f, 0x6e, 0x53, 0x75, 0x72, 0x76, 0x69, 0x76, 0x6f, 0x72, 0x41, 0x69, 0x72, 0x64, 0x72, 0x6f,
	0x70, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x10, 0x99, 0x4f, 0x12, 0x14, 0x0a, 0x0f,
	0x4f, 0x6e, 0x53, 0x77, 0x61, 0x70, 0x42, 0x6f, 0x64, 0x79, 0x44, 0x65, 0x62, 0x75, 0x67, 0x10,
	0x9a, 0x4f, 0x12, 0x12, 0x0a, 0x0d, 0x4f, 0x6e, 0x53, 0x77, 0x61, 0x70, 0x43, 0x6c, 0x6f, 0x74,
	0x68, 0x65, 0x73, 0x10, 0x9b, 0x4f, 0x12, 0x16, 0x0a, 0x11, 0x4f, 0x6e, 0x53, 0x77, 0x61, 0x70,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x10, 0x9c, 0x4f, 0x12, 0x15,
	0x0a, 0x10, 0x4f, 0x6e, 0x53, 0x77, 0x61, 0x70, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x6f,
	0x6c, 0x65, 0x10, 0x9d, 0x4f, 0x12, 0x0c, 0x0a, 0x07, 0x4f, 0x6e, 0x54, 0x68, 0x72, 0x6f, 0x77,
	0x10, 0x9e, 0x4f, 0x12, 0x1d, 0x0a, 0x18, 0x4f, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x71, 0x75, 0x69,
	0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x10,
	0x9f, 0x4f, 0x12, 0x1e, 0x0a, 0x19, 0x4f, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x71, 0x75, 0x69, 0x6c,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x76, 0x65, 0x72, 0x74, 0x65, 0x64, 0x10,
	0xa0, 0x4f, 0x12, 0x14, 0x0a, 0x0f, 0x4f, 0x6e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x41,
	0x6c, 0x74, 0x50, 0x46, 0x58, 0x10, 0xa1, 0x4f, 0x12, 0x10, 0x0a, 0x0b, 0x4f, 0x70, 0x65, 0x6e,
	0x42, 0x75, 0x6e, 0x6b, 0x65, 0x72, 0x73, 0x10, 0xa2, 0x4f, 0x12, 0x0d, 0x0a, 0x08, 0x4f, 0x76,
	0x65, 0x72, 0x6c, 0x6f, 0x61, 0x64, 0x10, 0xa3, 0x4f, 0x12, 0x1c, 0x0a, 0x17, 0x50, 0x6c, 0x61,
	0x79, 0x41, 0x62, 0x73, 0x6f, 0x72, 0x62, 0x50, 0x66, 0x78, 0x46, 0x6f, 0x72, 0x54, 0x72, 0x61,
	0x69, 0x74, 0x6f, 0x72, 0x10, 0xa4, 0x4f, 0x12, 0x12, 0x0a, 0x0d, 0x50, 0x6c, 0x61, 0x79, 0x45,
	0x6d, 0x6f, 0x74, 0x65, 0x41, 0x6e, 0x69, 0x6d, 0x10, 0xa5, 0x4f, 0x12, 0x17, 0x0a, 0x12, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x10, 0xa6, 0x4f, 0x12, 0x14, 0x0a, 0x0f, 0x50, 0x6c, 0x61, 0x79, 0x46, 0x65, 0x65, 0x64,
	0x62, 0x61, 0x63, 0x6b, 0x53, 0x66, 0x78, 0x10, 0xa7, 0x4f, 0x12, 0x10, 0x0a, 0x0b, 0x50, 0x6c,
	0x61, 0x79, 0x46, 0x69, 0x72, 0x65, 0x53, 0x66, 0x78, 0x10, 0xa8, 0x4f, 0x12, 0x15, 0x0a, 0x10,
	0x50, 0x6c, 0x61, 0x79, 0x47, 0x69, 0x67, 0x67, 0x6c, 0x65, 0x53, 0x66, 0x78, 0x52, 0x50, 0x43,
	0x10, 0xa9, 0x4f, 0x12, 0x12, 0x0a, 0x0d, 0x50, 0x6c, 0x61, 0x79, 0x52, 0x65, 0x6c, 0x6f, 0x61,
	0x64, 0x53, 0x66, 0x78, 0x10, 0xaa, 0x4f, 0x12, 0x17, 0x0a, 0x12, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x10, 0xab, 0x4f,
	0x12, 0x12, 0x0a, 0x0d, 0x50, 0x75, 0x6e, 0x44, 0x72, 0x6f, 0x70, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x10, 0xac, 0x4f, 0x12, 0x14, 0x0a, 0x0f, 0x50, 0x75, 0x6e, 0x48, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x10, 0xad, 0x4f, 0x12, 0x14, 0x0a, 0x0f, 0x50, 0x75,
	0x6e, 0x48, 0x75, 0x6e, 0x67, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x10, 0xae, 0x4f,
	0x12, 0x17, 0x0a, 0x12, 0x52, 0x65, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x52, 0x50, 0x43, 0x10, 0xaf, 0x4f, 0x12, 0x11, 0x0a, 0x0c, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x50, 0x66, 0x78, 0x52, 0x50, 0x43, 0x10, 0xb0, 0x4f, 0x12, 0x17, 0x0a, 0x12,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x10, 0xb1, 0x4f, 0x12, 0x18, 0x0a, 0x13, 0x52, 0x65, 0x73, 0x65, 0x74, 0x44, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x65, 0x78, 0x74, 0x52, 0x50, 0x43, 0x10, 0xb2, 0x4f, 0x12,
	0x0b, 0x0a, 0x06, 0x52, 0x65, 0x76, 0x69, 0x76, 0x65, 0x10, 0xb3, 0x4f, 0x12, 0x0f, 0x0a, 0x0a,
	0x52, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x10, 0xb4, 0x4f, 0x12, 0x16, 0x0a,
	0x11, 0x53, 0x61, 0x62, 0x6f, 0x74, 0x61, 0x67, 0x65, 0x45, 0x73, 0x63, 0x61, 0x70, 0x65, 0x52,
	0x50, 0x43, 0x10, 0xb5, 0x4f, 0x12, 0x17, 0x0a, 0x12, 0x53, 0x65, 0x6e, 0x64, 0x53, 0x65, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x10, 0xb6, 0x4f, 0x12, 0x0f,
	0x0a, 0x0a, 0x53, 0x65, 0x74, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x10, 0xb7, 0x4f, 0x12,
	0x16, 0x0a, 0x11, 0x53, 0x65, 0x74, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x50, 0x43, 0x10, 0xb8, 0x4f, 0x12, 0x13, 0x0a, 0x0e, 0x53, 0x65, 0x74, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x10, 0xb9, 0x4f, 0x12, 0x14, 0x0a, 0x0f,
	0x53, 0x65, 0x74, 0x44, 0x72, 0x6f, 0x70, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x10,
	0xba, 0x4f, 0x12, 0x11, 0x0a, 0x0c, 0x53, 0x65, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x52,
	0x50, 0x43, 0x10, 0xbb, 0x4f, 0x12, 0x14, 0x0a, 0x0f, 0x53, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x56, 0x69, 0x65, 0x77, 0x49, 0x64, 0x10, 0xbc, 0x4f, 0x12, 0x19, 0x0a, 0x14, 0x53,
	0x65, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x46, 0x6f, 0x72,
	0x41, 0x6c, 0x6c, 0x10, 0xbd, 0x4f, 0x12, 0x0f, 0x0a, 0x0a, 0x53, 0x65, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x49, 0x44, 0x10, 0xbe, 0x4f, 0x12, 0x16, 0x0a, 0x11, 0x53, 0x65, 0x74, 0x54, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x10, 0xbf, 0x4f, 0x12,
	0x18, 0x0a, 0x13, 0x53, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x46, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x52, 0x50, 0x43, 0x10, 0xc0, 0x4f, 0x12, 0x16, 0x0a, 0x11, 0x53, 0x65, 0x74,
	0x55, 0x6e, 0x69, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0xc1,
	0x4f, 0x12, 0x18, 0x0a, 0x13, 0x53, 0x65, 0x74, 0x75, 0x70, 0x4b, 0x6e, 0x6f, 0x63, 0x6b, 0x64,
	0x6f, 0x77, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x10, 0xc2, 0x4f, 0x12, 0x1e, 0x0a, 0x19, 0x53,
	0x65, 0x74, 0x56, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x6f, 0x43, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x10, 0xc3, 0x4f, 0x12, 0x11, 0x0a, 0x0c, 0x53,
	0x65, 0x74, 0x57, 0x61, 0x76, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x10, 0xc4, 0x4f, 0x12, 0x13,
	0x0a, 0x0e, 0x53, 0x68, 0x6f, 0x77, 0x47, 0x61, 0x6d, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x10, 0xc5, 0x4f, 0x12, 0x1b, 0x0a, 0x16, 0x53, 0x68, 0x6f, 0x77, 0x53, 0x61, 0x62, 0x6f, 0x74,
	0x61, 0x67, 0x65, 0x64, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x10, 0xc6, 0x4f,
	0x12, 0x18, 0x0a, 0x13, 0x53, 0x68, 0x6f, 0x77, 0x53, 0x61, 0x62, 0x6f, 0x74, 0x61, 0x67, 0x65,
	0x49, 0x63, 0x6f, 0x6e, 0x52, 0x50, 0x43, 0x10, 0xc7, 0x4f, 0x12, 0x18, 0x0a, 0x13, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x79, 0x6e, 0x63, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x10, 0xc8, 0x4f, 0x12, 0x16, 0x0a, 0x11, 0x53, 0x70, 0x61, 0x77, 0x6e, 0x47, 0x61, 0x73,
	0x42, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x52, 0x50, 0x43, 0x10, 0xc9, 0x4f, 0x12, 0x13, 0x0a, 0x0e,
	0x53, 0x70, 0x61, 0x77, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x10, 0xca,
	0x4f, 0x12, 0x15, 0x0a, 0x10, 0x53, 0x70, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x61, 0x64, 0x6e, 0x65,
	0x73, 0x73, 0x52, 0x50, 0x43, 0x10, 0xcb, 0x4f, 0x12, 0x0f, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x10, 0xcc, 0x4f, 0x12, 0x17, 0x0a, 0x12, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x10,
	0xcd, 0x4f, 0x12, 0x0e, 0x0a, 0x09, 0x53, 0x74, 0x6f, 0x70, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x10,
	0xce, 0x4f, 0x12, 0x1c, 0x0a, 0x17, 0x53, 0x79, 0x6e, 0x63, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x10, 0xcf, 0x4f,
	0x12, 0x1f, 0x0a, 0x1a, 0x53, 0x79, 0x6e, 0x63, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x10, 0xd0,
	0x4f, 0x12, 0x11, 0x0a, 0x0c, 0x53, 0x79, 0x6e, 0x63, 0x4d, 0x56, 0x50, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x10, 0xd1, 0x4f, 0x12, 0x1c, 0x0a, 0x17, 0x53, 0x79, 0x6e, 0x63, 0x4f, 0x76, 0x65, 0x72,
	0x72, 0x69, 0x64, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x10,
	0xd2, 0x4f, 0x12, 0x22, 0x0a, 0x1d, 0x53, 0x79, 0x6e, 0x63, 0x50, 0x72, 0x65, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x10, 0xd3, 0x4f, 0x12, 0x1e, 0x0a, 0x19, 0x53, 0x79, 0x6e, 0x63, 0x50, 0x72,
	0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52,
	0x6f, 0x6c, 0x65, 0x10, 0xd4, 0x4f, 0x12, 0x1c, 0x0a, 0x17, 0x53, 0x79, 0x6e, 0x63, 0x50, 0x72,
	0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x54, 0x72, 0x61, 0x69, 0x74, 0x6f, 0x72,
	0x73, 0x10, 0xd5, 0x4f, 0x12, 0x14, 0x0a, 0x0f, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x76, 0x69,
	0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x10, 0xd6, 0x4f, 0x12, 0x10, 0x0a, 0x0b, 0x53, 0x79,
	0x6e, 0x63, 0x53, 0x74, 0x61, 0x74, 0x52, 0x50, 0x43, 0x10, 0xd7, 0x4f, 0x12, 0x14, 0x0a, 0x0f,
	0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x10,
	0xd8, 0x4f, 0x12, 0x16, 0x0a, 0x11, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x41, 0x6e, 0x69, 0x6d, 0x61,
	0x6c, 0x46, 0x65, 0x64, 0x52, 0x50, 0x43, 0x10, 0xd9, 0x4f, 0x12, 0x16, 0x0a, 0x11, 0x54, 0x72,
	0x61, 0x70, 0x41, 0x6e, 0x64, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x50, 0x43, 0x10,
	0xda, 0x4f, 0x12, 0x19, 0x0a, 0x14, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x41, 0x72, 0x65,
	0x61, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x52, 0x50, 0x43, 0x10, 0xdb, 0x4f, 0x12, 0x12, 0x0a,
	0x0d, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x50, 0x66, 0x78, 0x52, 0x50, 0x43, 0x10, 0xdc,
	0x4f, 0x12, 0x15, 0x0a, 0x10, 0x55, 0x64, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x61, 0x64, 0x69,
	0x6f, 0x53, 0x6c, 0x6f, 0x74, 0x10, 0xdd, 0x4f, 0x12, 0x11, 0x0a, 0x0c, 0x55, 0x64, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x10, 0xde, 0x4f, 0x12, 0x1f, 0x0a, 0x1a, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x10, 0xdf, 0x4f, 0x12, 0x1a, 0x0a, 0x15,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f,
	0x72, 0x73, 0x52, 0x50, 0x43, 0x10, 0xe0, 0x4f, 0x12, 0x1d, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x10, 0xe1, 0x4f, 0x12, 0x11, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x10, 0xe2, 0x4f, 0x12, 0x14, 0x0a, 0x0f, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x10, 0xe3, 0x4f,
	0x12, 0x19, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x70, 0x61, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x50, 0x43, 0x10, 0xe4, 0x4f, 0x12, 0x15, 0x0a, 0x10, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x10,
	0xe5, 0x4f, 0x12, 0x11, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x75, 0x73, 0x63,
	0x6c, 0x65, 0x10, 0xe6, 0x4f, 0x12, 0x1b, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x54, 0x72, 0x61, 0x69, 0x74, 0x6f, 0x72, 0x73, 0x10,
	0xe7, 0x4f, 0x12, 0x16, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x10, 0xe8, 0x4f, 0x12, 0x11, 0x0a, 0x0c, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x10, 0xe9, 0x4f, 0x12, 0x15, 0x0a,
	0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x61, 0x64, 0x79, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x10, 0xea, 0x4f, 0x12, 0x10, 0x0a, 0x0b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x6c,
	0x6f, 0x74, 0x73, 0x10, 0xeb, 0x4f, 0x12, 0x11, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x61, 0x73, 0x6b, 0x55, 0x49, 0x10, 0xec, 0x4f, 0x12, 0x11, 0x0a, 0x0c, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x10, 0xed, 0x4f, 0x12, 0x12, 0x0a, 0x0d,
	0x4f, 0x70, 0x65, 0x6e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x44, 0x6f, 0x6f, 0x72, 0x10, 0xee, 0x4f,
	0x12, 0x14, 0x0a, 0x0f, 0x42, 0x61, 0x63, 0x6b, 0x70, 0x61, 0x63, 0x6b, 0x43, 0x72, 0x61, 0x66,
	0x74, 0x65, 0x64, 0x10, 0xef, 0x4f, 0x12, 0x15, 0x0a, 0x10, 0x4f, 0x6e, 0x42, 0x61, 0x63, 0x6b,
	0x70, 0x61, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x6c, 0x65, 0x6e, 0x10, 0xf0, 0x4f, 0x12, 0x22, 0x0a,
	0x1d, 0x53, 0x79, 0x6e, 0x63, 0x50, 0x72, 0x6f, 0x78, 0x69, 0x6d, 0x69, 0x74, 0x79, 0x56, 0x6f,
	0x69, 0x63, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x50, 0x43, 0x10, 0xf1,
	0x4f, 0x12, 0x15, 0x0a, 0x10, 0x48, 0x69, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x52, 0x50, 0x43, 0x10, 0xf2, 0x4f, 0x12, 0x15, 0x0a, 0x10, 0x53, 0x68, 0x6f, 0x77,
	0x4e, 0x61, 0x6d, 0x65, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x50, 0x43, 0x10, 0xf3, 0x4f, 0x12,
	0x15, 0x0a, 0x10, 0x4b, 0x69, 0x6c, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x6c, 0x79,
	0x52, 0x50, 0x43, 0x10, 0xf4, 0x4f, 0x12, 0x18, 0x0a, 0x13, 0x4f, 0x6e, 0x53, 0x61, 0x62, 0x6f,
	0x74, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x10, 0xf5, 0x4f,
	0x12, 0x0d, 0x0a, 0x08, 0x53, 0x61, 0x62, 0x6f, 0x74, 0x61, 0x67, 0x65, 0x10, 0xf6, 0x4f, 0x12,
	0x10, 0x0a, 0x0b, 0x4d, 0x6f, 0x76, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x50, 0x43, 0x10, 0xf7,
	0x4f, 0x12, 0x1c, 0x0a, 0x17, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x53,
	0x79, 0x6e, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x10, 0xf8, 0x4f, 0x12,
	0x1a, 0x0a, 0x15, 0x4f, 0x6e, 0x49, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x52, 0x50, 0x43, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6c, 0x65, 0x10, 0xf9, 0x4f, 0x12, 0x19, 0x0a, 0x14, 0x4f,
	0x6e, 0x49, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x52, 0x50, 0x43, 0x54, 0x68, 0x72, 0x6f, 0x77, 0x61,
	0x62, 0x6c, 0x65, 0x10, 0xfa, 0x4f, 0x2a, 0x75, 0x0a, 0x10, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x4f,
	0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09,
	0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x52,
	0x45, 0x41, 0x44, 0x59, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x4c, 0x41, 0x59, 0x10, 0x03,
	0x12, 0x12, 0x0a, 0x0e, 0x4c, 0x4f, 0x53, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54,
	0x45, 0x44, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x45, 0x41, 0x56, 0x45, 0x10, 0x05, 0x12,
	0x0c, 0x0a, 0x08, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x45, 0x44, 0x10, 0x06, 0x2a, 0x83, 0x01,
	0x0a, 0x09, 0x52, 0x70, 0x63, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x07, 0x0a, 0x03, 0x41,
	0x6c, 0x6c, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x73, 0x10, 0x01,
	0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x6c, 0x6c, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x65,
	0x64, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x73, 0x42, 0x75, 0x66,
	0x66, 0x65, 0x72, 0x65, 0x64, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x6c, 0x6c, 0x56, 0x69,
	0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x10, 0x05, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x6c, 0x6c,
	0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x65, 0x64, 0x56, 0x69, 0x61, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x10, 0x06, 0x2a, 0x59, 0x0a, 0x0d, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10,
	0x00, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x4f, 0x4f, 0x4d, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x58,
	0x49, 0x53, 0x54, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f,
	0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x54,
	0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x03, 0x42, 0x13,
	0x42, 0x0b, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5a, 0x04, 0x2f,
	0x67, 0x65, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_Common_proto_rawDescOnce sync.Once
	file_Common_proto_rawDescData = file_Common_proto_rawDesc
)

func file_Common_proto_rawDescGZIP() []byte {
	file_Common_proto_rawDescOnce.Do(func() {
		file_Common_proto_rawDescData = protoimpl.X.CompressGZIP(file_Common_proto_rawDescData)
	})
	return file_Common_proto_rawDescData
}

var file_Common_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_Common_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_Common_proto_goTypes = []interface{}{
	(MsgId)(0),                    // 0: msg.MsgId
	(EventId)(0),                  // 1: msg.EventId
	(PlayerStatusEnum)(0),         // 2: msg.PlayerStatusEnum
	(RpcTarget)(0),                // 3: msg.RpcTarget
	(ErrorCodeEnum)(0),            // 4: msg.ErrorCodeEnum
	(*ErroCode)(nil),              // 5: msg.ErroCode
	(*RoomInfo)(nil),              // 6: msg.RoomInfo
	(*Player)(nil),                // 7: msg.Player
	(*ExpandedGameSettings)(nil),  // 8: msg.ExpandedGameSettings
	(*UserRotator)(nil),           // 9: msg.UserRotator
	(*UserPos)(nil),               // 10: msg.UserPos
	(*ByteStringArray)(nil),       // 11: msg.ByteStringArray
	(*InstantiateParameters)(nil), // 12: msg.InstantiateParameters
}
var file_Common_proto_depIdxs = []int32{
	8,  // 0: msg.RoomInfo.customGameSettings:type_name -> msg.ExpandedGameSettings
	2,  // 1: msg.Player.status:type_name -> msg.PlayerStatusEnum
	11, // 2: msg.InstantiateParameters.data:type_name -> msg.ByteStringArray
	7,  // 3: msg.InstantiateParameters.creator:type_name -> msg.Player
	4,  // [4:4] is the sub-list for method output_type
	4,  // [4:4] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_Common_proto_init() }
func file_Common_proto_init() {
	if File_Common_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_Common_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ErroCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Common_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoomInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Common_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Player); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Common_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExpandedGameSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Common_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserRotator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Common_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserPos); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Common_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ByteStringArray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Common_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstantiateParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_Common_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_Common_proto_goTypes,
		DependencyIndexes: file_Common_proto_depIdxs,
		EnumInfos:         file_Common_proto_enumTypes,
		MessageInfos:      file_Common_proto_msgTypes,
	}.Build()
	File_Common_proto = out.File
	file_Common_proto_rawDesc = nil
	file_Common_proto_goTypes = nil
	file_Common_proto_depIdxs = nil
}
